{
  "version": 3,
  "sources": ["../src/styles/style.module.css", "../src/toast.ts", "../src/index.ts"],
  "sourcesContent": [".toast-container * {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.toast-container {\r\n    pointer-events: none;\r\n    position: fixed;\r\n    width: var(--toast-container-width, 99%);\r\n    height: var(--toast-container-height, 99%);\r\n    inset: 0;\r\n    margin: auto;\r\n}\r\n\r\n.toast-holder {\r\n    position: absolute;\r\n\r\n    width: var(--toast-width, clamp(5rem, 100%, 20rem));\r\n}\r\n\r\n.toast-card {\r\n    position: relative;\r\n\r\n    pointer-events: all;\r\n\r\n    min-height: var(--toast-height);\r\n\r\n    margin-top: var(--toast-spacing);\r\n    margin-bottom: var(--toast-spacing);\r\n\r\n    border: var(--toast-border-width, 2px) var(--toast-border-style, solid) var(--toast-border-color, var(--toast-text-color, inherit));\r\n\r\n    padding: var(--toast-padding, 0.75rem);\r\n    border-radius: var(--toast-radius, 0.5rem);\r\n\r\n    background: var(--toast-background-color, inherit);\r\n    color: var(--toast-text-color, inherit);\r\n\r\n    box-shadow: var(--toast-box-shadow, 0px 2px 4px hsla(0, 0%, 0%, 0.25));\r\n\r\n    display: flex;\r\n    align-items: var(--toast-align-items, center);\r\n    gap: 0.5rem;\r\n    justify-content: space-between;\r\n\r\n    transform-origin: var(--toast-transform-origin, center);\r\n\r\n    animation-name: var(--toast-animation, popup);\r\n    animation-timing-function: var(--toast-ease, ease-in-out);\r\n    animation-duration: var(--toast-animation-duration, 0ms);\r\n    animation-direction: var(--toast-animation-direction, \"normal\");\r\n    animation-fill-mode: var(--toast-animation-fill-mode, \"forwards\");\r\n}\r\n\r\n.toast-card-close-button-hover .toast-close-button {\r\n    opacity: 0;\r\n}\r\n\r\n.toast-card-close-button-hover:hover .toast-close-button {\r\n    opacity: 1;\r\n}\r\n\r\n.toast-card[data-type=\"success\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-success, green);\r\n    --toast-text-color: var(--toast-success-foreground, white);\r\n}\r\n\r\n.toast-card[data-type=\"info\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-info, blue);\r\n    --toast-text-color: var(--toast-info-foreground, white);\r\n}\r\n\r\n.toast-card[data-type=\"error\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-error, red);\r\n    --toast-text-color: var(--toast-error-foreground, white);\r\n}\r\n\r\n.toast-card[data-type=\"warn\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-warn, yellow);\r\n    --toast-text-color: var(--toast-warn-foreground, white);\r\n}\r\n\r\n.toast-text-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.25rem;\r\n    flex: 1;\r\n}\r\n\r\n.toast-text-container>div {\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n    font-weight: var(--toast-title-font-weight, 700);\r\n}\r\n\r\n.toast-text-container>p {\r\n    font-size: 0.875rem;\r\n    line-height: 1.25;\r\n}\r\n\r\n.toast-icon-container {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 1.175rem;\r\n    height: 1.175rem;\r\n}\r\n\r\n.toast-icon {\r\n    stroke: var(--toast-icon-stroke-color, var(--toast-text-color, initial));\r\n    fill: var(--toast-icon-fill-color, transparent);\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    stroke-width: var(--toast-icon-stroke-width, 2.5px);\r\n}\r\n\r\n.toast-close-button {\r\n    cursor: pointer;\r\n\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    color: var(--toast-close-button-foreground, initial);\r\n    background-color: var(--toast-close-button-background, initial);\r\n\r\n    width: var(--toast-close-button-width, 1.25rem);\r\n    height: var(--toast-close-button-height, 1.25rem);\r\n\r\n    padding: var(--toast-close-button-vertical-padding, 0rem) var(--toast-close-button-horizontal-padding, 0rem);\r\n\r\n    box-shadow: var(--toast-close-button-box-shadow, 0px 2px 8px hsla(0, 0%, 0%, 0.25));\r\n\r\n    border-radius: var(--toast-close-button-border-radius, 0.25rem);\r\n\r\n    border: var(--toast-close-button-border, none);\r\n}\r\n\r\n.toast-close-button .toast-icon {\r\n    stroke: var(--toast-text-color, black);}\r\n\r\n.toast-close-button:hover {\r\n    opacity: 0.8;\r\n    transform: scale(1.25);\r\n}\r\n\r\n.toast-close-button-text {\r\n    --toast-close-button-width: auto;\r\n    \r\n    --toast-close-button-vertical-padding: 0.25rem;\r\n    --toast-close-button-horizontal-padding: 0.75rem;\r\n}\r\n\r\n.toast-close-button-top-right {\r\n    position: absolute;\r\n\r\n    top: -20%;\r\n    right: -0.25rem;\r\n}\r\n\r\n.toast-close-button-top-left {\r\n    position: absolute;\r\n\r\n    top: -20%;\r\n    left: -0.25rem;\r\n}\r\n\r\n.toast-close-button-inline {\r\n    position: relative;\r\n    --toast-close-button-box-shadow: none;\r\n}\r\n\r\n.toast-close-button-text:hover {\r\n    transform: scale(1);\r\n}\r\n", "import {\n    toast,\n    type ToastImportance,\n    type ToastOptions,\n    type ToastProps,\n    type ToastReturn,\n    type ToastTypes,\n} from \".\";\nimport {\n    close_button_aborters_hashmaps,\n    DEFAULT_BOX_SHADOW_SIZE,\n    DEFAULT_CLOSE_BUTTON_POSITION,\n    timer_hashmaps,\n} from \"./consts\";\nimport {\n    $,\n    $create,\n    append_custom_icon_to_element,\n    does_user_prefer_reduced_motion,\n    init,\n    toast_container,\n} from \"./lib\";\n\nimport style from \"./styles/style.module.css\";\n\ntype AriaLive = \"off\" | \"polite\" | \"assertive\";\n\nconst toast_holder = $create(\"div\");\n\ntoast_holder.classList.add(style[\"toast-holder\"]);\ntoast_holder.id = \"toast-holder\";\n\nconst aria_live: {\n    [Properties in ToastImportance]: AriaLive;\n} = {\n    \"not important\": \"off\",\n    important: \"polite\",\n    critical: \"assertive\",\n};\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    if (!toast_container) {\n        const created_toast_container = $create(\"div\");\n\n        created_toast_container.classList.add(style[\"toast-container\"]);\n        created_toast_container.setAttribute(\n            \"aria-label\",\n            \"The main container for toast notifications.\",\n        );\n\n        created_toast_container.append(toast_holder);\n        document.body.append(created_toast_container);\n    } else {\n        toast_container.append(toast_holder);\n    }\n});\n\n/**\n * ## Show toast\n * The main engine of this overall library. This handles toast creation.\n *\n * @param props {ToastProps} This is where you pass in the toast's message and an optional title.\n * @param options {Partial<ToastOptions>} Contains options to customize the toast.\n * @param type {ToastTypes} Specifies what kind of toast this is, and styles and/or performs methods based on the type.\n * @returns {ToastReturn} { toast_id }\n */\nexport function show_toast(\n    props: ToastProps,\n    options?: Partial<ToastOptions>,\n    type: ToastTypes = \"neutral\",\n): ToastReturn {\n    if (type == \"loading\" && options?.close_button == true) {\n        alert(\"A loading toast should not be manually closed.\");\n        console.error(\n            new Error(\"A loading toast should not be manually closed.\"),\n        );\n\n        throw new Error(\"A loading toast should not be manually closed.\");\n    }\n\n    if (options && options.close_button == undefined) {\n        options.close_button = true;\n    }\n\n    const {\n        animation_duration,\n        duration,\n        toast_id,\n        icon_position,\n        toast_position,\n        importance,\n        colors,\n        animation,\n        automatically_close,\n    } = init(options, type);\n    const toast_container = $(\"#toast-holder\")!;\n\n    toast_container.classList.add(\"toast-\" + toast_position);\n\n    const { title, message } = props;\n    const toast_card = $create(\"div\");\n    const toast_text_container = $create(\"div\");\n    const toast_message = $create(\"p\");\n\n    let toast_title: undefined | HTMLDivElement;\n    let toast_icon_container: undefined | HTMLDivElement;\n    let toast_close_button: undefined | HTMLButtonElement;\n\n    if (title) {\n        toast_title = $create(\"div\");\n        toast_title.setAttribute(\n            \"aria-label\",\n            \"The title of toast #\" + toast_id,\n        );\n        toast_title.id = \"toast-\" + toast_id + \"-title\";\n        toast_title.textContent = title;\n    }\n\n    if (Boolean(options?.custom_icon) || type != \"neutral\") {\n        toast_icon_container = $create(\"div\");\n        toast_icon_container.classList.add(style[\"toast-icon-container\"]);\n\n        if (options?.custom_icon) {\n            append_custom_icon_to_element(\n                toast_icon_container,\n                options?.custom_icon,\n            );\n\n            if (typeof options?.custom_icon != \"string\") {\n                options?.custom_icon.classList.add(style[\"toast-icon\"]);\n            }\n        } else {\n            import(\"./lib\").then((module) => {\n                const svg = module.get_icon(type);\n\n                svg.classList.add(style[\"toast-icon\"]);\n                toast_icon_container?.append(svg);\n            });\n        }\n    }\n\n    toast_card.id = toast_id;\n    toast_card.classList.add(style[\"toast-card\"]);\n    toast_card.setAttribute(\"role\", \"alert\");\n    toast_card.setAttribute(\"data-type\", type);\n    toast_card.setAttribute(\"aria-live\", aria_live[importance]);\n    toast_card.setAttribute(\"data-color-type\", colors);\n\n    if (options?.shadow_size) {\n        import(\"./consts\").then((module) => {\n            toast_card.style.setProperty(\n                \"--toast-box-shadow\",\n                module.BOX_SHADOW_SIZES[\n                    options?.shadow_size || DEFAULT_BOX_SHADOW_SIZE\n                ],\n            );\n        });\n    }\n\n    if (!does_user_prefer_reduced_motion) {\n        toast_card.setAttribute(\n            \"data-exit-animation-duration\",\n            animation_duration?.out?.toString(),\n        );\n        toast_card.style.setProperty(\n            \"--toast-animation-duration\",\n            animation_duration?.in + \"ms\",\n        );\n    }\n\n    toast_card.style.setProperty(\"--toast-animation\", animation);\n\n    if (colors == \"icon\" || colors == \"icon-stroke\") {\n        import(\"./styles/dynamic/icon.module.css\").then((module) => {\n            toast_card.classList.add(module.default[\"toast-card\"]);\n        });\n    }\n\n    toast_text_container.classList.add(style[\"toast-text-container\"]);\n\n    toast_message.id = \"toast-\" + toast_id + \"-message\";\n    toast_message.textContent = message;\n    toast_message.setAttribute(\n        \"aria-label\",\n        \"The message of toast #\" + toast_id,\n    );\n\n    if (toast_title) {\n        toast_text_container.append(toast_title);\n    }\n\n    toast_card.setAttribute(\n        \"aria-labelledby\",\n        toast_title ? toast_title.id : toast_message.id,\n    );\n\n    toast_text_container.append(toast_message);\n\n    if (options?.close_button && type != \"loading\") {\n        let handle_close_button_click: undefined | ((_e: MouseEvent) => void);\n\n        toast_close_button = $create(\"button\");\n\n        if (typeof options.close_button != \"boolean\") {\n            if (options.close_button?.appearance == \"visible-on-hover\") {\n                toast_card.classList.add(\n                    style[\"toast-card-close-button-hover\"],\n                );\n            }\n\n            if (options.close_button.custom_button?.on_click) {\n                handle_close_button_click = function () {\n                    if (typeof options?.close_button != \"boolean\") {\n                        if (options?.close_button?.custom_button?.on_click) {\n                            options?.close_button?.custom_button?.on_click(\n                                toast_id,\n                            );\n                        }\n                    }\n\n                    toast.dismiss(toast_id);\n                };\n            } else {\n                handle_close_button_click = function () {\n                    toast.dismiss(toast_id);\n                };\n            }\n\n            toast_close_button.classList.add(\n                style[\n                    \"toast-close-button-\" +\n                        (options?.close_button?.position ||\n                            DEFAULT_CLOSE_BUTTON_POSITION)\n                ],\n            );\n\n            if (options.close_button.type == \"text\") {\n                toast_close_button.classList.add(\n                    style[\"toast-close-button-text\"],\n                );\n                toast_close_button.style.setProperty(\n                    \"--toast-close-button-border-radius\",\n                    \"0.25rem\",\n                );\n                toast_close_button.textContent =\n                    options.close_button.text || \"close\";\n            } else if (options.close_button?.type == \"icon\") {\n                if (options.close_button.custom_icon) {\n                    append_custom_icon_to_element(\n                        toast_close_button,\n                        options.close_button?.custom_icon,\n                    );\n                } else {\n                    import(\"./lib\").then((module) => {\n                        const svg = module.get_icon(\"close\");\n\n                        svg.classList.add(style[\"toast-icon\"]);\n                        toast_close_button?.append(svg);\n                    });\n                }\n            } else {\n                import(\"./lib\").then((module) => {\n                    const svg = module.get_icon(\"close\");\n\n                    svg.classList.add(style[\"toast-icon\"]);\n                    toast_close_button?.append(svg);\n                });\n            }\n\n            if (options.close_button.custom_button?.className) {\n                toast_close_button.className +=\n                    \" \" + options.close_button.custom_button.className;\n            }\n        } else {\n            handle_close_button_click = function () {\n                toast.dismiss(toast_id);\n            };\n\n            import(\"./lib\").then((module) => {\n                const svg = module.get_icon(\"close\");\n\n                svg.classList.add(style[\"toast-icon\"]);\n                toast_close_button?.append(svg);\n            });\n\n            toast_close_button.classList.add(\n                style[\"toast-close-button-\" + DEFAULT_CLOSE_BUTTON_POSITION],\n            );\n        }\n\n        toast_close_button.setAttribute(\n            \"aria-label\",\n            \"Close toast #\" + toast_id,\n        );\n        toast_close_button.classList.add(style[\"toast-close-button\"]);\n        toast_close_button.setAttribute(\"type\", \"button\");\n        toast_close_button.setAttribute(\"aria-controls\", toast_id);\n        toast_close_button.tabIndex = -1;\n\n        const aborter = new AbortController();\n\n        close_button_aborters_hashmaps.set(toast_id, aborter);\n\n        if (handle_close_button_click) {\n            toast_close_button.addEventListener(\n                \"click\",\n                handle_close_button_click,\n                {\n                    signal: aborter.signal,\n                    once: true,\n                },\n            );\n        } else {\n            console.error(\n                \"Function to invoke for a close button does not exist!\",\n            );\n        }\n    }\n\n    if (!toast_close_button && options?.close_button) {\n        throw new Error(\n            `Failed on creating a close button when it's specified for the toast instance with an id of ${toast_id} to have one!`,\n        );\n    }\n\n    if (type != \"neutral\" && icon_position == \"left\") {\n        toast_card.append(toast_icon_container as Node);\n    } else {\n        if (\n            (typeof options?.close_button != \"boolean\" &&\n                options?.close_button?.position == \"inline\") ||\n            options?.close_button\n        ) {\n            toast_card.append(toast_close_button as HTMLButtonElement);\n        }\n    }\n\n    toast_card.append(toast_text_container);\n\n    if (type != \"neutral\" && icon_position == \"right\") {\n        toast_card.append(toast_icon_container as Node);\n        toast_text_container.style.textAlign = \"right\";\n    } else {\n        if (\n            (typeof options?.close_button != \"boolean\" &&\n                options?.close_button?.position == \"inline\") ||\n            options?.close_button\n        ) {\n            toast_card.append(toast_close_button as HTMLButtonElement);\n        }\n    }\n\n    toast_container.append(toast_card);\n\n    if (type != \"loading\" && automatically_close == true) {\n        const timeout = setTimeout(\n            () => {\n                toast.dismiss(toast_id as string);\n            },\n            does_user_prefer_reduced_motion\n                ? duration\n                : duration - animation_duration?.out,\n        );\n\n        timer_hashmaps.set(toast_id, timeout);\n    }\n\n    return { toast_id } as { toast_id: string };\n}\n", "/**@type {import(\"@types/index.d.ts\")} */\n\nimport { $, does_user_prefer_reduced_motion, dom_reflow } from \"./lib\";\nimport { show_toast } from \"./toast\";\nimport {\n    DEFAULT_ANIMATION_DURATION,\n    close_button_aborters_hashmaps,\n    timer_hashmaps,\n} from \"./consts\";\n\nimport \"./styles/root.css\";\nimport \"./styles/position.css\";\nimport \"./styles/animations.css\";\n\nexport type BoxShadowSizes = \"sm\" | \"md\" | \"lg\";\nexport type ToastCloseButtonPositions = \"inline\" | \"top-right\" | \"top-left\";\ntype IconPositions = \"left\" | \"right\";\n\n/**\n * ## Toast Positions\n * Specifies where the toast will be located\n */\nexport type ToastPositions =\n    | \"top-left\"\n    | \"top-center\"\n    | \"top-right\"\n    | \"bottom-left\"\n    | \"bottom-right\"\n    | \"bottom-center\";\n\n/**\n * ## Toast Types\n *\n * - Netural means no icon and a plain background\n * - Success means a checkmark icon and a green background\n * - Error means an x icon and a red background\n * - Warn means a warning icon and a yellow background\n * - Info means a letter i icon and a blue background\n * - Loading means a non-closable toast and a loading icon with a plain background\n */\nexport type ToastTypes =\n    | \"neutral\"\n    | \"success\"\n    | \"error\"\n    | \"warn\"\n    | \"info\"\n    | \"loading\";\n\n/**\n * Various toast animations you can apply to the toast on either enter or exit. This will be\n * applied to the CSS property of var(--animation-name), which will be used by the toast.\n */\nexport type ToastAnimations =\n    | \"popdown\"\n    | \"popup\"\n    | \"fade-in\"\n    | \"slide-up\"\n    | \"slide-down\"\n    | \"slide-left\"\n    | \"slide-right\";\n\n/**\n * ## Toast Colors\n *\n * The places which the default toast colors will apply to\n */\nexport type ToastColor = \"background\" | \"icon\" | \"icon-stroke\";\n\n/**\n * ## Toast Importance\n *\n * Indicates how important this toast is to aria for accessibility.\n */\nexport type ToastImportance = \"not important\" | \"important\" | \"critical\";\n\n/**\n * ## Toast Close Button Options\n * The options available for a close button.\n */\nexport type ToastCloseButtonOptions = {\n    /**\n     * The position of the close button of a toast instance.\n     * If inline, then the button's position will depend on the\n     * value of @type { IconPositions }.\n     *\n     * @default\n     *\n     * top-right\n     */\n    position?: ToastCloseButtonPositions;\n\n    /**\n     * If you'd like to pass on a custom button. For example,\n     * adding a function that is triggered when the close button is clicked,\n     * such as \"Undo\".\n     */\n    custom_button?: {\n        /**\n         * Function to trigger when this button is clicked.\n         * You don't need to add the toast.dismiss() function here\n         * as it will be called for you together with this function.\n         *\n         * @param toast_id\n         * @returns void\n         */\n        on_click?: (toast_id: string) => void;\n\n        /**\n         * Class name to provide the custom buttom.\n         * Please do refer to the CSS properties for this\n         * button first before brute-forcing your way with !important\n         * when it does not take into effect.\n         *\n         * The initial className is toast-close-button.\n         *\n         * Take note that CSS Modules is used for this so the initial class\n         * name may not be exactly the same.\n         *\n         * With this method, you can use TailwindCSS.\n         */\n        className?: string;\n    };\n\n    /**\n     * How will this button be visible?\n     *\n     * Visible means it's there right off the bat.\n     *\n     * @default\n     *\n     * visible\n     */\n    appearance?: \"visible\" | \"visible-on-hover\";\n} & (\n    | {\n          type?: \"text\";\n          /**\n           * Please do pass in the property \"type\" a value of \"text\" if you\n           * are going to pass in a text\n           * since the fallback value for the type property is icon.\n           *\n           * @default\n           * close\n           */\n          text?: string;\n      }\n    | {\n          type?: \"icon\";\n          /** If this custom icon is a string,\n           *  then we append it using innerHTML.\n           *\n           * @default\n           *\n           * an X icon\n           */\n          custom_icon?: string | HTMLElement | SVGElement;\n      }\n);\n\n/**\n * ## Toast Options\n *\n * The options available to a toast instance or element for\n * customization on toast creation.\n *\n */\nexport type ToastOptions = {\n    /**\n     * The duration in milliseconds you'd like to give this toast instance before it gets removed\n     * from the DOM or the webpage.\n     *\n     * @default \"Toast container attribute [data-duration] value or 3000\"\n     */\n    duration?: number;\n\n    /**\n     * The id you'd like to give this toast instance. This is not required as\n     * the random id will be pseudo-randomly generated for you already.\n     *\n     */\n    toast_id?: string;\n\n    /**\n     * Whether to add a close button or not. Alternatively,\n     * you can add options for this close button, or even\n     * attach you custom close button.\n     *\n     *  @default true\n     */\n    close_button?: boolean | ToastCloseButtonOptions;\n\n    /**\n     *  Indicates how long the toast will animate in and out in milliseconds.\n     *\n     * @default\n     *\n     * in: 400\n     * out: 400\n     */\n    animation_duration?: {\n        in?: number;\n        out?: number;\n    };\n\n    /**\n     *  A custom icon to pass to the toast. This can be a string or an element that will be appended.\n     *  The toast maker automatically adds the toast icon class to the element you pass through if it is an element.\n     *  If it's a string, then it will not have the toast icon class.\n     *\n     *\n     *  **WARNING**\n     *  This method uses innerHTML for strings\n     */\n    custom_icon?: string | HTMLElement | SVGElement;\n\n    /**\n     * The position a specific toast's icon.\n     * @type { IconPositions }\n     *\n     * @default\n     *\n     * \"left\"\n     */\n    icon_position?: IconPositions;\n\n    /**\n     * The position where the toast is rendered.\n     *\n     *  @default\n     *\n     *  top-right\n     */\n    toast_position?: ToastPositions;\n\n    /**\n     *  Sets the importance of this toast. This translates to\n     *  the [aria-live] attribute for accessibility.\n     *\n     *  This is not required as it will be inferred for you already. Namely:\n     *\n     *  - Success, Warn, and Error is critical, which means [aria-live] is assertive\n     *  - Loading and Neutral states are not important, which means [aria-live] is off\n     *  - Info is important, which means [aria-live] is polite\n     */\n    importance?: ToastImportance;\n\n    /**\n     * Sets what the toast color will target.\n     *\n     * @default\n     *\n     * background\n     */\n    colors?: ToastColor;\n\n    /**\n     * Enter animation for the toast\n     *\n     * @default\n     * \"popdown\"\n     */\n    animation?: ToastAnimations;\n\n    /**\n     * Even though loading toasts must be closed programatically (by you),\n     * you can still choose to not automatically close other toasts.\n     *\n     * **WARNING**\n     * If you disable this, then you must be the one to close the toast like a loading toast.\n     *\n     * @default\n     * true\n     */\n    automatically_close?: boolean;\n\n    /**\n     * The size of the toast's box shadow. The default is already in the CSS Property var(--toast-box-shadow).\n     * This will lazily import the constant that maps the specific CSS value for the box shadow, so take note of that\n     * if you're an optimization enthusiast.\n     *\n     *  @default\n     * sm\n     */\n    shadow_size?: BoxShadowSizes;\n};\n\n/**\n * ## ToastProps\n * The main characteristics the toast will have.\n * An optional title and a required message.\n */\nexport type ToastProps = {\n    /**\n     * An optional title to give the toast. This will appear in bold by default.\n     */\n    title?: string;\n\n    /**\n     * The main message of the toast.\n     */\n    message: string;\n};\n\n/**\n * ## Toast Return\n *\n * The return value of a toast instance.\n *\n * ### toast_id\n * The id of the toast element that was pseudo-randomly generated, or this can also be\n * the toast id that you provide in the toast function arguments.\n *\n */\nexport type ToastReturn = {\n    toast_id: string;\n};\n\ninterface Toast {\n    (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n        type?: ToastTypes,\n    ): ToastReturn;\n\n    /**\n     * ## Success Toast\n     *\n     * A toast that signals success. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"success\"\n     */\n    success: (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n    ) => ToastReturn;\n\n    /**\n     * ## Error Toast\n     *\n     * A toast that signals error. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"error\"\n     */\n    error: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Warn Toast\n     *\n     * A toast that signals a warning. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"warn\"\n     */\n    warn: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Info Toast\n     *\n     * A toast to share fun facts or information. Has a default configuration of:\n     *\n     * - importance = \"important\"\n     * - type = \"info\"\n     */\n    info: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Loading Toast\n     *\n     * A toast to indicate a loading state of something. Cannot be manually closed with a button, and\n     * must be closed by you, the developer, programatically as this will not have a setTimeout. Has a default\n     * configuration of:\n     *\n     * - importance = \"not important\"\n     * - type = \"loading\"\n     */\n    loading: (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n    ) => ToastReturn;\n\n    /**\n     * ## Toast Dismiss\n     *\n     * Removes a toast based upon its id.\n     *\n     * You can prematurely remove a toast if you'd like using this function. This is the function used\n     * for toast removal.\n     *\n     * Responsibilities:\n     * - Removes event listeners attached to all elements of a toast instance.\n     * - Animates a toast instance out.\n     * - Removes a toast from the DOM.\n     */\n    dismiss: (toast_id: string) => void;\n}\n\n/**\n * ## Toast\n * The main guy.\n *\n * This calls the main engine (or function) of this library, and has various properties\n * that automatically gives you the type argument for the show_toast() function.\n *\n * There are special functions too, like:\n *\n * - dismiss() or toast.dismiss()\n *\n * ### Accessibility\n * This automatically infers aria-live values for you.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live\n *\n * Additionally, this code automatically detects if a user prefers instant animations (prefers-reduced-motion). If so,\n * your configuration for animation_duration will be disregarded.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\n */\nexport const toast: Toast = function (props, options, type) {\n    return show_toast(props, options, type);\n};\n\ntoast.success = function (props, options) {\n    return show_toast(props, options, \"success\");\n};\n\ntoast.error = function (props, options) {\n    return show_toast(props, options, \"error\");\n};\n\ntoast.warn = function (props, options) {\n    return show_toast(props, options, \"warn\");\n};\n\ntoast.info = function (props, options) {\n    return show_toast(props, options, \"info\");\n};\n\ntoast.loading = function (props, options) {\n    return show_toast(props, options, \"loading\");\n};\n\ntoast.dismiss = function (toast_id) {\n    const toast_container = $(\"#toast-holder\") as HTMLElement;\n    const toast = $(`#${CSS.escape(toast_id)}`) as HTMLElement;\n\n    if (!toast_container) {\n        console.error(\"Toast container does not exist!\");\n    }\n\n    if (!toast) {\n        console.error(\"Toast does not exist!\");\n    }\n\n    /**\n     *  Remove all event listeners of\n     *  this specific toast instance and its relative aborters.\n     */\n    close_button_aborters_hashmaps.get(toast_id)?.abort();\n    close_button_aborters_hashmaps.delete(toast_id);\n\n    if (does_user_prefer_reduced_motion) {\n        toast_container.removeChild(toast);\n    } else {\n        clearTimeout(timer_hashmaps.get(toast_id));\n        timer_hashmaps.delete(toast_id);\n        toast.style.setProperty(\"--toast-animation-direction\", \"reverse\");\n        toast.style.setProperty(\"--toast-animation-fill-mode\", \"backwards\");\n\n        dom_reflow(toast);\n\n        setTimeout(\n            () => {\n                toast_container.removeChild(toast);\n            },\n            +toast.getAttribute(\"data-exit-animation-duration\") ??\n                DEFAULT_ANIMATION_DURATION,\n        );\n    }\n};\n"],
  "mappings": "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",
  "names": ["toast-container", "toast-holder", "toast-card", "toast-card-close-button-hover", "toast-close-button", "toast-text-container", "toast-icon-container", "toast-icon", "toast-close-button-text", "toast-close-button-top-right", "toast-close-button-top-left", "toast-close-button-inline", "toast_container", "toast_container", "toast"]
}
