{
  "version": 3,
  "sources": ["../src/lib.ts", "../src/consts.ts", "../src/styles/style.module.css", "../src/toast.ts", "../src/index.ts"],
  "sourcesContent": ["import type { ToastImportance, ToastTypes } from \".\";\n\n/**\n * ## Query Selector\n * A shorthand for:\n *\n * ```ts\n * document.querySelector(HTMLElement)\n * ```\n */\nexport const $ = document.querySelector.bind(\n    document,\n) as typeof document.querySelector;\n\n/**\n * ## Element Creator\n * A shorthand for:\n *\n * ```ts\n * document.createElement(HTMLElement)\n * ```\n */\nexport const $create = document.createElement.bind(\n    document,\n) as typeof document.createElement;\n\nexport const toast_container = document.getElementById(\"toast-container\");\n\nconst MAX_ID_LENGTH = 16;\nconst MIN_ID_LENGTH = 6;\nconst alpha_numericals = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n\n/**\n * ## gen_random_id()\n * Synchronously generates a random id using Math.random along a string of alphanumericals using a for loop.\n * If a Math.random() in an if statement is < 0.5, then this turns the current acquired character\n * to uppercase.\n */\nexport function gen_random_id(length: number = 8) {\n    if (length < MIN_ID_LENGTH) {\n        throw new Error(\n            \"Please provide a string length that's greater than \" +\n                MIN_ID_LENGTH,\n        );\n    } else if (length > MAX_ID_LENGTH) {\n        throw new Error(\n            \"Please provide a string length that's less than \" + MAX_ID_LENGTH,\n        );\n    }\n\n    let str = \"\";\n\n    for (let idx = 0; idx < length; ++idx) {\n        const random = Math.floor(\n            Math.random() * (alpha_numericals.length - 1),\n        );\n\n        if (Math.random() < 0.5) {\n            str += alpha_numericals[random].toUpperCase();\n        } else {\n            str += alpha_numericals[random];\n        }\n    }\n\n    return str;\n}\n\n/**\n *  ## get_icon()\n *\n *  A static icon generator to clean up the code a little bit.\n *  Uses document.createElement JS function and append() instead of innerHTML.\n *\n * Icons are from HeroIcons\n *\n *  @see https://heroicons.com/\n *\n */\nexport function get_icon(type: ToastTypes): HTMLElement | SVGSVGElement {\n    if (type == \"loading\") {\n        const loader = document.createElement(\"div\");\n\n        loader.classList.add(\"spin\", \"toast-loading\");\n        loader.style.width = \"14px\";\n        loader.style.height = \"14px\";\n\n        return loader;\n    } else {\n        const svg = document.createElementNS(\n            \"http://www.w3.org/2000/svg\",\n            \"svg\",\n        );\n        const path = document.createElementNS(\n            \"http://www.w3.org/2000/svg\",\n            \"path\",\n        );\n\n        svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        svg.setAttribute(\"fill\", \"none\");\n        svg.setAttribute(\"viewBox\", \"0 0 24 24\");\n        svg.setAttribute(\"stroke-width\", \"1.5\");\n        svg.setAttribute(\"stroke\", \"currentColor\");\n        svg.setAttribute(\"width\", \"16\");\n        svg.setAttribute(\"height\", \"16\");\n\n        path.setAttribute(\"stroke-linecap\", \"round\");\n        path.setAttribute(\"stroke-linejoin\", \"round\");\n\n        if (type == \"success\") {\n            path.setAttribute(\n                \"d\",\n                \"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\",\n            );\n        } else if (type == \"error\") {\n            path.setAttribute(\n                \"d\",\n                \"M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z\",\n            );\n        } else if (type == \"info\") {\n            path.setAttribute(\n                \"d\",\n                \"M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z\",\n            );\n        } else if (type == \"warn\") {\n            path.setAttribute(\n                \"d\",\n                \"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\",\n            );\n        }\n\n        svg.append(path);\n\n        return svg;\n    }\n}\n\n/**\n * ## get_importance\n *\n * @param type {ToastTypes}\n * @returns A mapped value of aria-live attribute value. Namely:\n *\n * - \"not important\" == \"off\"\n * - \"important\" == \"polite\"\n * - \"critical\" == \"assertive\"\n */\nexport function get_importance(type: ToastTypes): ToastImportance {\n    let importance: ToastImportance;\n\n    if (type == \"error\" || type == \"success\" || type == \"warn\") {\n        importance = \"critical\";\n    } else if (type == \"loading\" || type == \"neutral\") {\n        importance = \"not important\";\n    } else {\n        importance = \"important\";\n    }\n\n    return importance;\n}\n\nconst does_user_prefer_reduced_motion_query = window.matchMedia(\n    \"('prefers-reduced-motion')\",\n);\n\nexport let does_user_prefer_reduced_motion =\n    does_user_prefer_reduced_motion_query.matches;\n\ndoes_user_prefer_reduced_motion_query.addEventListener(\"change\", (e) => {\n    does_user_prefer_reduced_motion = e.matches;\n});\n", "import type { ToastAnimations, ToastColor, ToastPositions } from \".\";\n\nexport const DEFAULT_DURATION = 3000;\nexport const DEFAULT_ANIMATION_DURATION = 400;\nexport const DEFAULT_ICON_POSITION = \"left\";\nexport const DEFAULT_TOAST_POSITION: ToastPositions = \"top-right\";\nexport const DEFAULT_COLORS: ToastColor = \"background\";\nexport const DEFAULT_ANIMATION: ToastAnimations = \"popdown\";\n/**\n *  A storage for all existing timers for each toast so that if a\n *  toast were to be removed prematurely (before the setTimeout is fulfilled),\n *  then we can clean it up from memory.\n */\nexport const timer_hashmaps = new Map();\n\n/**\n *  Toast positions\n */\nexport const toast_positions: ToastPositions[] = [\n    \"top-left\",\n    \"top-center\",\n    \"top-right\",\n    \"bottom-left\",\n    \"bottom-center\",\n    \"bottom-right\",\n];\n", ".toast-container * {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.toast-container {\r\n    pointer-events: none;\r\n    position: fixed;\r\n    width: var(--toast-container-width);\r\n    height: var(--toast-container-height);\r\n    inset: 0;\r\n    margin: auto;\r\n}\r\n\r\n.toast-holder {\r\n    position: absolute;\r\n\r\n    width: var(--toast-width);\r\n}\r\n\r\n.toast-card {\r\n    pointer-events: all;\r\n\r\n    min-height: var(--toast-height);\r\n\r\n    margin-top: var(--toast-spacing);\r\n    margin-bottom: var(--toast-spacing);\r\n\r\n    border: var(--toast-border-width) var(--toast-border-style) var(--toast-border-color);\r\n\r\n    padding: var(--toast-padding);\r\n    border-radius: var(--toast-radius);\r\n\r\n    background: var(--toast-background-color);\r\n    color: var(--toast-text-color);\r\n\r\n    box-shadow: var(--toast-box-shadow);\r\n\r\n    display: flex;\r\n    align-items: var(--toast-align-items);\r\n    gap: 0.5rem;\r\n    justify-content: space-between;\r\n\r\n    transform-origin: var(--toast-transform-origin);\r\n\r\n    animation-name: var(--toast-animation);\r\n    animation-timing-function: var(--toast-ease);\r\n    animation-duration: var(--toast-animation-duration, 0ms);\r\n    animation-direction: var(--toast-animation-direction, \"normal\");\r\n    animation-fill-mode: var(--toast-animation-fill-mode, \"forwards\");\r\n}\r\n\r\n.toast-card[data-type=\"success\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-success);\r\n    --toast-text-color: var(--toast-success-foreground);\r\n}\r\n\r\n.toast-card[data-type=\"info\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-info);\r\n    --toast-text-color: var(--toast-info-foreground);\r\n}\r\n\r\n.toast-card[data-type=\"error\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-error);\r\n    --toast-text-color: var(--toast-error-foreground);\r\n}\r\n\r\n.toast-card[data-type=\"warn\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-warn);\r\n    --toast-text-color: var(--toast-warn-foreground);\r\n}\r\n\r\n.toast-text-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.25rem;\r\n    flex: 1;\r\n}\r\n\r\n.toast-text-container>div {\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n    font-weight: var(--toast-title-font-weight);\r\n}\r\n\r\n.toast-text-container>p {\r\n    font-size: 0.875rem;\r\n    line-height: 1.25;\r\n}\r\n\r\n.toast-icon-container {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 1.175rem;\r\n    height: 1.175rem;\r\n}\r\n\r\n.toast-icon {\r\n    stroke: var(--toast-icon-stroke-color, var(--toast-text-color));\r\n    fill: var(--toast-icon-fill-color, transparent);\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n", "import {\n    toast,\n    ToastAnimations,\n    type ToastColor,\n    type ToastImportance,\n    type ToastOptions,\n    type ToastProps,\n    type ToastReturn,\n    type ToastTypes,\n} from \".\";\nimport {\n    DEFAULT_ANIMATION,\n    DEFAULT_ANIMATION_DURATION,\n    DEFAULT_COLORS,\n    DEFAULT_DURATION,\n    DEFAULT_ICON_POSITION,\n    DEFAULT_TOAST_POSITION,\n    timer_hashmaps,\n} from \"./consts\";\nimport {\n    $,\n    $create,\n    does_user_prefer_reduced_motion,\n    gen_random_id,\n    get_icon,\n    get_importance,\n    toast_container,\n} from \"./lib\";\n\nimport style from \"./styles/style.module.css\";\n\ntype AriaLive = \"off\" | \"polite\" | \"assertive\";\n\nconst toast_holder = $create(\"div\");\n\ntoast_holder.classList.add(style[\"toast-holder\"]);\ntoast_holder.id = \"toast-holder\";\n\nconst aria_live: {\n    [Properties in ToastImportance]: AriaLive;\n} = {\n    \"not important\": \"off\",\n    important: \"polite\",\n    critical: \"assertive\",\n};\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    if (!toast_container) {\n        const created_toast_container = $create(\"div\");\n\n        created_toast_container.classList.add(style[\"toast-container\"]);\n        created_toast_container.setAttribute(\n            \"aria-label\",\n            \"The main container for toast notifications.\",\n        );\n\n        created_toast_container.append(toast_holder);\n        document.body.append(created_toast_container);\n    } else {\n        toast_container.append(toast_holder);\n    }\n});\n\nfunction init(options?: Partial<ToastOptions>, type: ToastTypes = \"neutral\") {\n    let toast_container_provided_duration: number;\n\n    if (toast_container) {\n        toast_container_provided_duration =\n            +toast_container.getAttribute(\"data-duration\")!;\n    } else {\n        toast_container_provided_duration = +$(\"#toast-container\")!;\n    }\n\n    let enter_animation_duration: number;\n    let exit_animation_duration: number;\n    let duration: number;\n    let toast_id: string;\n    let importance: ToastImportance;\n    let color: ToastColor;\n    let animation: ToastAnimations;\n\n    if (options) {\n        duration =\n            options?.duration ||\n            toast_container_provided_duration ||\n            DEFAULT_DURATION;\n        toast_id = options?.toast_id || gen_random_id();\n        enter_animation_duration =\n            options?.animation_duration?.in || DEFAULT_ANIMATION_DURATION;\n        exit_animation_duration =\n            options?.animation_duration?.out || DEFAULT_ANIMATION_DURATION;\n        color = options?.colors || DEFAULT_COLORS;\n        importance = options?.importance || get_importance(type);\n        animation = options?.animation || DEFAULT_ANIMATION;\n    } else {\n        duration = toast_container_provided_duration || DEFAULT_DURATION;\n        toast_id = gen_random_id();\n        enter_animation_duration = DEFAULT_ANIMATION_DURATION;\n        exit_animation_duration = DEFAULT_ANIMATION_DURATION;\n        color = DEFAULT_COLORS;\n        importance = get_importance(type);\n        animation = DEFAULT_ANIMATION;\n    }\n\n    return {\n        animation_duration: {\n            in: enter_animation_duration,\n            out: exit_animation_duration,\n        },\n        duration,\n        toast_id,\n        icon_position: options?.icon_position || DEFAULT_ICON_POSITION,\n        toast_position: options?.toast_position || DEFAULT_TOAST_POSITION,\n        importance,\n        colors: color,\n        animation,\n    };\n}\n\n/**\n * ## Show toast\n * The main engine of this overall library. This handles toast creation.\n *\n * @param props {ToastProps} This is where you pass in the toast's message and an optional title.\n * @param options {Partial<ToastOptions>} Contains options to customize the toast.\n * @param type {ToastTypes} Specifies what kind of toast this is, and styles and/or performs methods based on the type.\n * @returns {ToastReturn} { toast_id }\n */\nexport function show_toast(\n    props: ToastProps,\n    options?: Partial<ToastOptions>,\n    type: ToastTypes = \"neutral\",\n): ToastReturn {\n    if (type == \"loading\" && options?.close_button == true) {\n        alert(\"A loading toast should not be manually closed.\");\n        console.error(\n            new Error(\"A loading toast should not be manually closed.\"),\n        );\n\n        throw new Error(\"A loading toast should not be manually closed.\");\n    }\n\n    const {\n        animation_duration,\n        duration,\n        toast_id,\n        icon_position,\n        toast_position,\n        importance,\n        colors,\n        animation,\n    } = init(options, type);\n\n    const toast_container = $(\"#toast-holder\")!;\n\n    toast_container.classList.add(\"toast-\" + toast_position);\n\n    const { title, message } = props;\n\n    const toast_card = $create(\"div\");\n    const toast_text_container = $create(\"div\");\n    const toast_message = $create(\"p\");\n\n    let toast_title: undefined | HTMLDivElement;\n    let toast_icon_container: undefined | HTMLDivElement;\n\n    if (title) {\n        toast_title = $create(\"div\");\n        toast_title.setAttribute(\n            \"aria-label\",\n            \"The title of toast #\" + toast_id,\n        );\n        toast_title.id = \"toast-\" + toast_id + \"-title\";\n        toast_title.textContent = title;\n    }\n\n    if (options?.custom_icon || type != \"neutral\") {\n        toast_icon_container = $create(\"div\");\n        toast_icon_container.classList.add(style[\"toast-icon-container\"]);\n\n        if (options?.custom_icon) {\n            if (typeof options.custom_icon == \"string\") {\n                toast_icon_container.innerHTML = options.custom_icon;\n            } else if (\n                options?.custom_icon instanceof HTMLElement ||\n                options?.custom_icon instanceof SVGElement\n            ) {\n                options?.custom_icon.classList.add(style[\"toast-icon\"]);\n                toast_icon_container.append(options.custom_icon);\n            }\n        } else {\n            const svg = get_icon(type);\n\n            svg.classList.add(style[\"toast-icon\"]);\n            toast_icon_container.append(svg);\n        }\n    }\n\n    toast_card.id = toast_id;\n    toast_card.classList.add(style[\"toast-card\"]);\n    toast_card.setAttribute(\"role\", \"alert\");\n    toast_card.setAttribute(\"data-type\", type);\n    toast_card.setAttribute(\"aria-live\", aria_live[importance]);\n    toast_card.setAttribute(\"data-color-type\", colors);\n\n    if (!does_user_prefer_reduced_motion) {\n        toast_card.setAttribute(\n            \"data-exit-animation-duration\",\n            animation_duration?.out?.toString(),\n        );\n        toast_card.style.setProperty(\n            \"--toast-animation-duration\",\n            animation_duration?.in + \"ms\",\n        );\n    }\n\n    toast_card.style.setProperty(\"--toast-animation\", animation);\n\n    if (colors == \"icon\" || colors == \"icon-stroke\") {\n        import(\"./styles/dynamic/icon.module.css\").then((module) => {\n            toast_card.classList.add(module.default[\"toast-card\"]);\n        });\n    }\n\n    toast_text_container.classList.add(style[\"toast-text-container\"]);\n\n    toast_message.id = \"toast-\" + toast_id + \"-message\";\n    toast_message.textContent = message;\n    toast_message.setAttribute(\n        \"aria-label\",\n        \"The message of toast #\" + toast_id,\n    );\n\n    if (toast_title) {\n        toast_text_container.append(toast_title);\n    }\n\n    toast_card.setAttribute(\n        \"aria-labelledby\",\n        toast_title ? toast_title.id : toast_message.id,\n    );\n\n    toast_text_container.append(toast_message);\n\n    if (type != \"neutral\" && icon_position == \"left\") {\n        toast_card.append(toast_icon_container as Node);\n    }\n\n    toast_card.append(toast_text_container);\n\n    if (type != \"neutral\" && icon_position == \"right\") {\n        toast_card.append(toast_icon_container as Node);\n        toast_text_container.style.textAlign = \"right\";\n    }\n\n    toast_container.append(toast_card);\n\n    const timeout = setTimeout(\n        () => {\n            console.log(toast_id);\n            toast.dismiss(toast_id as string);\n        },\n        does_user_prefer_reduced_motion\n            ? duration\n            : duration - animation_duration?.out,\n    );\n\n    timer_hashmaps.set(toast_id, timeout);\n\n    return { toast_id } as { toast_id: string };\n}\n", "/**@type {import(\"@types/index.d.ts\")} */\n\nimport { $, does_user_prefer_reduced_motion } from \"./lib\";\nimport { show_toast } from \"./toast\";\nimport { DEFAULT_ANIMATION_DURATION, timer_hashmaps } from \"./consts\";\n\n/**\n * ## Toast Positions\n * Specifies where the toast will be located\n */\nexport type ToastPositions =\n    | \"top-left\"\n    | \"top-center\"\n    | \"top-right\"\n    | \"bottom-left\"\n    | \"bottom-right\"\n    | \"bottom-center\";\n\n/**\n * ## Toast Types\n *\n * - Netural means no icon and a plain background\n * - Success means a checkmark icon and a green background\n * - Error means an x icon and a red background\n * - Warn means a warning icon and a yellow background\n * - Info means a letter i icon and a blue background\n * - Loading means a non-closable toast and a loading icon with a plain background\n */\nexport type ToastTypes =\n    | \"neutral\"\n    | \"success\"\n    | \"error\"\n    | \"warn\"\n    | \"info\"\n    | \"loading\";\n\n/**\n * Various toast animations you can apply to the toast on either enter or exit. This will be\n * applied to the CSS property of var(--animation-name), which will be used by the toast.\n */\nexport type ToastAnimations =\n    | \"popdown\"\n    | \"popup\"\n    | \"fade-in\"\n    | \"slide-up\"\n    | \"slide-down\"\n    | \"slide-left\"\n    | \"slide-right\";\n\n/**\n * ## Toast Colors\n *\n * The places which the default toast colors will apply to\n */\nexport type ToastColor = \"background\" | \"icon\" | \"icon-stroke\";\n\n/**\n * ## Toast Importance\n *\n * Indicates how important this toast is to aria for accessibility.\n */\nexport type ToastImportance = \"not important\" | \"important\" | \"critical\";\n\n/**\n * ## Toast Options\n *\n * The options available to a toast instance or element for\n * customization on toast creation.\n *\n * Available options are:\n *\n * - duration (optional)\n * - toast_id (optional), useful if you have your own id generator\n */\nexport type ToastOptions = {\n    /**\n     * The duration in milliseconds you'd like to give this toast instance before it gets removed\n     * from the DOM or the webpage.\n     *\n     * @default \"Toast container attribute [data-duration] value or 3000\"\n     */\n    duration?: number;\n\n    /**\n     * The id you'd like to give this toast instance. This is not required as\n     * the random id will be pseudo-randomly generated for you already.\n     *\n     */\n    toast_id?: string;\n\n    /** Whether to add a close button or not\n     *\n     *  @default true\n     */\n    close_button?: boolean;\n\n    /**\n     *  Indicates how long the toast will animate in and out in milliseconds.\n     *\n     * @default\n     *\n     * in: 400\n     * out: 400\n     */\n    animation_duration?: {\n        in?: number;\n        out?: number;\n    };\n\n    /**\n     *  A custom icon to pass to the toast. This can be a string or an element that will be appended.\n     *  The toast maker automatically adds the toast icon class to the element you pass through if it is an element.\n     *  If it's a string, then it will not have the toast icon class.\n     *\n     *\n     *  **WARNING:** This method uses innerHTML for strings\n     */\n    custom_icon?: string | HTMLElement | SVGElement;\n\n    /**\n     * The position a specific toast's icon.\n     *\n     * @default\n     *\n     * \"left\"\n     */\n    icon_position?: \"left\" | \"right\";\n\n    /**\n     * The position where the toast is rendered.\n     *\n     *  @default\n     *\n     *  top-right\n     */\n    toast_position?: ToastPositions;\n\n    /**\n     *  Sets the importance of this toast. This translates to\n     *  the [aria-live] attribute for accessibility.\n     *\n     *  This is not required as it will be inferred for you already. Namely:\n     *\n     *  - Success, Warn, and Error is critical, which means [aria-live] is assertive\n     *  - Loading and Neutral states are not important, which means [aria-live] is off\n     *  - Info is important, which means [aria-live] is polite\n     */\n    importance?: ToastImportance;\n\n    /**\n     * Sets what the toast color will target.\n     *\n     * @default\n     *\n     * background\n     */\n    colors?: ToastColor;\n\n    /**\n     * Enter animation for the toast\n     *\n     * @default\n     * \"popdown\"\n     */\n    animation?: ToastAnimations;\n};\n\n/**\n * ## ToastProps\n * The main characteristics the toast will have.\n * An optional title and a required message.\n */\nexport type ToastProps = {\n    /**\n     * An optional title to give the toast. This will appear in bold by default.\n     */\n    title?: string;\n\n    /**\n     * The main message of the toast.\n     */\n    message: string;\n};\n\n/**\n * ## Toast Return\n *\n * The return value of a toast instance.\n *\n * ### toast_id\n * The id of the toast element that was pseudo-randomly generated, or this can also be\n * the toast id that you provide in the toast function arguments.\n *\n */\nexport type ToastReturn = {\n    toast_id: string;\n};\n\ninterface Toast {\n    (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n        type?: ToastTypes,\n    ): ToastReturn;\n\n    /**\n     * ## Success Toast\n     *\n     * A toast that signals success. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"success\"\n     */\n    success: (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n    ) => ToastReturn;\n\n    /**\n     * ## Error Toast\n     *\n     * A toast that signals error. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"error\"\n     */\n    error: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Warn Toast\n     *\n     * A toast that signals a warning. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"warn\"\n     */\n    warn: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Info Toast\n     *\n     * A toast to share fun facts or information. Has a default configuration of:\n     *\n     * - importance = \"important\"\n     * - type = \"info\"\n     */\n    info: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Loading Toast\n     *\n     * A toast to indicate a loading state of something. Cannot be manually closed with a button, and\n     * must be closed by you, the developer programatically as this will not have a setTimeout. Has a default\n     * configuration of:\n     *\n     * - importance = \"not important\"\n     * - type = \"loading\"\n     */\n    loading: (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n    ) => ToastReturn;\n\n    /**\n     * ## Toast Dismiss\n     *\n     * Removes a toast based upon its id.\n     *\n     * You can prematurely remove a toast if you'd like using this function. This is the function used\n     * for toast removal.\n     */\n    dismiss: (toast_id: string) => void;\n}\n\n/**\n * ## Toast\n * The main guy.\n *\n * This calls the main engine (or function) of this library, and has various properties\n * that automatically gives you the type argument for the show_toast() function.\n *\n * There are special functions too, like:\n *\n * - dismiss() or toast.dismiss()\n *\n * ### Accessibility\n * This automatically infers aria-live values for you.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live\n *\n * Additionally, this code automatically detects if a user prefers instant animations (prefers-reduced-motion). If so,\n * your configuration for animation_duration will be disregarded.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\n */\nexport const toast: Toast = function (props, options, type) {\n    return show_toast(props, options, type);\n};\n\ntoast.success = function (props, options) {\n    return show_toast(props, options, \"success\");\n};\n\ntoast.error = function (props, options) {\n    return show_toast(props, options, \"error\");\n};\n\ntoast.warn = function (props, options) {\n    return show_toast(props, options, \"warn\");\n};\n\ntoast.info = function (props, options) {\n    return show_toast(props, options, \"info\");\n};\n\ntoast.loading = function (props, options) {\n    return show_toast(props, options, \"loading\");\n};\n\ntoast.dismiss = function (toast_id) {\n    const toast_container = $(\"#toast-holder\") as HTMLElement;\n    const toast = $(`#${CSS.escape(toast_id)}`) as HTMLElement;\n\n    if (does_user_prefer_reduced_motion) {\n        toast_container.removeChild(toast);\n    } else {\n        clearTimeout(timer_hashmaps.get(toast_id));\n        timer_hashmaps.delete(toast_id);\n        toast.style.setProperty(\"--toast-animation-direction\", \"reverse\");\n        toast.style.setProperty(\"--toast-animation-fill-mode\", \"backwards\");\n\n        const className = toast.className;\n\n        toast.className = \"\";\n        toast.offsetWidth;\n        toast.className = className;\n\n        setTimeout(\n            () => {\n                toast_container.removeChild(toast);\n            },\n            +toast.getAttribute(\"data-exit-animation-duration\") ??\n                DEFAULT_ANIMATION_DURATION,\n        );\n    }\n};\n"],
  "mappings": ";AAUO,IAAM,IAAI,SAAS,cAAc;AAAA,EACpC;AACJ;AAUO,IAAM,UAAU,SAAS,cAAc;AAAA,EAC1C;AACJ;AAEO,IAAM,kBAAkB,SAAS,eAAe,iBAAiB;AAExE,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AACtB,IAAM,mBAAmB;AAQlB,SAAS,cAAc,SAAiB,GAAG;AAC9C,MAAI,SAAS,eAAe;AACxB,UAAM,IAAI;AAAA,MACN,wDACI;AAAA,IACR;AAAA,EACJ,WAAW,SAAS,eAAe;AAC/B,UAAM,IAAI;AAAA,MACN,qDAAqD;AAAA,IACzD;AAAA,EACJ;AAEA,MAAI,MAAM;AAEV,WAAS,MAAM,GAAG,MAAM,QAAQ,EAAE,KAAK;AACnC,UAAM,SAAS,KAAK;AAAA,MAChB,KAAK,OAAO,KAAK,iBAAiB,SAAS;AAAA,IAC/C;AAEA,QAAI,KAAK,OAAO,IAAI,KAAK;AACrB,aAAO,iBAAiB,MAAM,EAAE,YAAY;AAAA,IAChD,OAAO;AACH,aAAO,iBAAiB,MAAM;AAAA,IAClC;AAAA,EACJ;AAEA,SAAO;AACX;AAaO,SAAS,SAAS,MAA+C;AACpE,MAAI,QAAQ,WAAW;AACnB,UAAM,SAAS,SAAS,cAAc,KAAK;AAE3C,WAAO,UAAU,IAAI,QAAQ,eAAe;AAC5C,WAAO,MAAM,QAAQ;AACrB,WAAO,MAAM,SAAS;AAEtB,WAAO;AAAA,EACX,OAAO;AACH,UAAM,MAAM,SAAS;AAAA,MACjB;AAAA,MACA;AAAA,IACJ;AACA,UAAM,OAAO,SAAS;AAAA,MAClB;AAAA,MACA;AAAA,IACJ;AAEA,QAAI,aAAa,SAAS,4BAA4B;AACtD,QAAI,aAAa,QAAQ,MAAM;AAC/B,QAAI,aAAa,WAAW,WAAW;AACvC,QAAI,aAAa,gBAAgB,KAAK;AACtC,QAAI,aAAa,UAAU,cAAc;AACzC,QAAI,aAAa,SAAS,IAAI;AAC9B,QAAI,aAAa,UAAU,IAAI;AAE/B,SAAK,aAAa,kBAAkB,OAAO;AAC3C,SAAK,aAAa,mBAAmB,OAAO;AAE5C,QAAI,QAAQ,WAAW;AACnB,WAAK;AAAA,QACD;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,WAAW,QAAQ,SAAS;AACxB,WAAK;AAAA,QACD;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,WAAW,QAAQ,QAAQ;AACvB,WAAK;AAAA,QACD;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,WAAW,QAAQ,QAAQ;AACvB,WAAK;AAAA,QACD;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,OAAO,IAAI;AAEf,WAAO;AAAA,EACX;AACJ;AAYO,SAAS,eAAe,MAAmC;AAC9D,MAAI;AAEJ,MAAI,QAAQ,WAAW,QAAQ,aAAa,QAAQ,QAAQ;AACxD,iBAAa;AAAA,EACjB,WAAW,QAAQ,aAAa,QAAQ,WAAW;AAC/C,iBAAa;AAAA,EACjB,OAAO;AACH,iBAAa;AAAA,EACjB;AAEA,SAAO;AACX;AAEA,IAAM,wCAAwC,OAAO;AAAA,EACjD;AACJ;AAEO,IAAI,kCACP,sCAAsC;AAE1C,sCAAsC,iBAAiB,UAAU,CAAC,MAAM;AACpE,oCAAkC,EAAE;AACxC,CAAC;;;ACvKM,IAAM,mBAAmB;AACzB,IAAM,6BAA6B;AACnC,IAAM,wBAAwB;AAC9B,IAAM,yBAAyC;AAC/C,IAAM,iBAA6B;AACnC,IAAM,oBAAqC;AAM3C,IAAM,iBAAiB,oBAAI,IAAI;;;ACbtC;AAAA,EAAC,mBAAAA;AAAA,EAcA,gBAAAC;AAAA,EAMA,cAAAC;AAAA,EAoDA,wBAAAC;AAAA,EAkBA,wBAAAC;AAAA,EAOA,cAAAC;AAAA;;;AChED,IAAM,eAAe,QAAQ,KAAK;AAElC,aAAa,UAAU,IAAI,cAAM,cAAc,CAAC;AAChD,aAAa,KAAK;AAElB,IAAM,YAEF;AAAA,EACA,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,UAAU;AACd;AAEA,OAAO,iBAAiB,oBAAoB,MAAM;AAC9C,MAAI,CAAC,iBAAiB;AAClB,UAAM,0BAA0B,QAAQ,KAAK;AAE7C,4BAAwB,UAAU,IAAI,cAAM,iBAAiB,CAAC;AAC9D,4BAAwB;AAAA,MACpB;AAAA,MACA;AAAA,IACJ;AAEA,4BAAwB,OAAO,YAAY;AAC3C,aAAS,KAAK,OAAO,uBAAuB;AAAA,EAChD,OAAO;AACH,oBAAgB,OAAO,YAAY;AAAA,EACvC;AACJ,CAAC;AAED,SAAS,KAAK,SAAiC,OAAmB,WAAW;AACzE,MAAI;AAEJ,MAAI,iBAAiB;AACjB,wCACI,CAAC,gBAAgB,aAAa,eAAe;AAAA,EACrD,OAAO;AACH,wCAAoC,CAAC,EAAE,kBAAkB;AAAA,EAC7D;AAEA,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,MAAI,SAAS;AACT,eACI,SAAS,YACT,qCACA;AACJ,eAAW,SAAS,YAAY,cAAc;AAC9C,+BACI,SAAS,oBAAoB,MAAM;AACvC,8BACI,SAAS,oBAAoB,OAAO;AACxC,YAAQ,SAAS,UAAU;AAC3B,iBAAa,SAAS,cAAc,eAAe,IAAI;AACvD,gBAAY,SAAS,aAAa;AAAA,EACtC,OAAO;AACH,eAAW,qCAAqC;AAChD,eAAW,cAAc;AACzB,+BAA2B;AAC3B,8BAA0B;AAC1B,YAAQ;AACR,iBAAa,eAAe,IAAI;AAChC,gBAAY;AAAA,EAChB;AAEA,SAAO;AAAA,IACH,oBAAoB;AAAA,MAChB,IAAI;AAAA,MACJ,KAAK;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe,SAAS,iBAAiB;AAAA,IACzC,gBAAgB,SAAS,kBAAkB;AAAA,IAC3C;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,EACJ;AACJ;AAWO,SAAS,WACZ,OACA,SACA,OAAmB,WACR;AACX,MAAI,QAAQ,aAAa,SAAS,gBAAgB,MAAM;AACpD,UAAM,gDAAgD;AACtD,YAAQ;AAAA,MACJ,IAAI,MAAM,gDAAgD;AAAA,IAC9D;AAEA,UAAM,IAAI,MAAM,gDAAgD;AAAA,EACpE;AAEA,QAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,IAAI,KAAK,SAAS,IAAI;AAEtB,QAAMC,mBAAkB,EAAE,eAAe;AAEzC,EAAAA,iBAAgB,UAAU,IAAI,WAAW,cAAc;AAEvD,QAAM,EAAE,OAAO,QAAQ,IAAI;AAE3B,QAAM,aAAa,QAAQ,KAAK;AAChC,QAAM,uBAAuB,QAAQ,KAAK;AAC1C,QAAM,gBAAgB,QAAQ,GAAG;AAEjC,MAAI;AACJ,MAAI;AAEJ,MAAI,OAAO;AACP,kBAAc,QAAQ,KAAK;AAC3B,gBAAY;AAAA,MACR;AAAA,MACA,yBAAyB;AAAA,IAC7B;AACA,gBAAY,KAAK,WAAW,WAAW;AACvC,gBAAY,cAAc;AAAA,EAC9B;AAEA,MAAI,SAAS,eAAe,QAAQ,WAAW;AAC3C,2BAAuB,QAAQ,KAAK;AACpC,yBAAqB,UAAU,IAAI,cAAM,sBAAsB,CAAC;AAEhE,QAAI,SAAS,aAAa;AACtB,UAAI,OAAO,QAAQ,eAAe,UAAU;AACxC,6BAAqB,YAAY,QAAQ;AAAA,MAC7C,WACI,SAAS,uBAAuB,eAChC,SAAS,uBAAuB,YAClC;AACE,iBAAS,YAAY,UAAU,IAAI,cAAM,YAAY,CAAC;AACtD,6BAAqB,OAAO,QAAQ,WAAW;AAAA,MACnD;AAAA,IACJ,OAAO;AACH,YAAM,MAAM,SAAS,IAAI;AAEzB,UAAI,UAAU,IAAI,cAAM,YAAY,CAAC;AACrC,2BAAqB,OAAO,GAAG;AAAA,IACnC;AAAA,EACJ;AAEA,aAAW,KAAK;AAChB,aAAW,UAAU,IAAI,cAAM,YAAY,CAAC;AAC5C,aAAW,aAAa,QAAQ,OAAO;AACvC,aAAW,aAAa,aAAa,IAAI;AACzC,aAAW,aAAa,aAAa,UAAU,UAAU,CAAC;AAC1D,aAAW,aAAa,mBAAmB,MAAM;AAEjD,MAAI,CAAC,iCAAiC;AAClC,eAAW;AAAA,MACP;AAAA,MACA,oBAAoB,KAAK,SAAS;AAAA,IACtC;AACA,eAAW,MAAM;AAAA,MACb;AAAA,MACA,oBAAoB,KAAK;AAAA,IAC7B;AAAA,EACJ;AAEA,aAAW,MAAM,YAAY,qBAAqB,SAAS;AAE3D,MAAI,UAAU,UAAU,UAAU,eAAe;AAC7C,WAAO,2BAAkC,EAAE,KAAK,CAAC,WAAW;AACxD,iBAAW,UAAU,IAAI,OAAO,QAAQ,YAAY,CAAC;AAAA,IACzD,CAAC;AAAA,EACL;AAEA,uBAAqB,UAAU,IAAI,cAAM,sBAAsB,CAAC;AAEhE,gBAAc,KAAK,WAAW,WAAW;AACzC,gBAAc,cAAc;AAC5B,gBAAc;AAAA,IACV;AAAA,IACA,2BAA2B;AAAA,EAC/B;AAEA,MAAI,aAAa;AACb,yBAAqB,OAAO,WAAW;AAAA,EAC3C;AAEA,aAAW;AAAA,IACP;AAAA,IACA,cAAc,YAAY,KAAK,cAAc;AAAA,EACjD;AAEA,uBAAqB,OAAO,aAAa;AAEzC,MAAI,QAAQ,aAAa,iBAAiB,QAAQ;AAC9C,eAAW,OAAO,oBAA4B;AAAA,EAClD;AAEA,aAAW,OAAO,oBAAoB;AAEtC,MAAI,QAAQ,aAAa,iBAAiB,SAAS;AAC/C,eAAW,OAAO,oBAA4B;AAC9C,yBAAqB,MAAM,YAAY;AAAA,EAC3C;AAEA,EAAAA,iBAAgB,OAAO,UAAU;AAEjC,QAAM,UAAU;AAAA,IACZ,MAAM;AACF,cAAQ,IAAI,QAAQ;AACpB,YAAM,QAAQ,QAAkB;AAAA,IACpC;AAAA,IACA,kCACM,WACA,WAAW,oBAAoB;AAAA,EACzC;AAEA,iBAAe,IAAI,UAAU,OAAO;AAEpC,SAAO,EAAE,SAAS;AACtB;;;ACyBO,IAAM,QAAe,SAAU,OAAO,SAAS,MAAM;AACxD,SAAO,WAAW,OAAO,SAAS,IAAI;AAC1C;AAEA,MAAM,UAAU,SAAU,OAAO,SAAS;AACtC,SAAO,WAAW,OAAO,SAAS,SAAS;AAC/C;AAEA,MAAM,QAAQ,SAAU,OAAO,SAAS;AACpC,SAAO,WAAW,OAAO,SAAS,OAAO;AAC7C;AAEA,MAAM,OAAO,SAAU,OAAO,SAAS;AACnC,SAAO,WAAW,OAAO,SAAS,MAAM;AAC5C;AAEA,MAAM,OAAO,SAAU,OAAO,SAAS;AACnC,SAAO,WAAW,OAAO,SAAS,MAAM;AAC5C;AAEA,MAAM,UAAU,SAAU,OAAO,SAAS;AACtC,SAAO,WAAW,OAAO,SAAS,SAAS;AAC/C;AAEA,MAAM,UAAU,SAAU,UAAU;AAChC,QAAMC,mBAAkB,EAAE,eAAe;AACzC,QAAMC,SAAQ,EAAE,IAAI,IAAI,OAAO,QAAQ,CAAC,EAAE;AAE1C,MAAI,iCAAiC;AACjC,IAAAD,iBAAgB,YAAYC,MAAK;AAAA,EACrC,OAAO;AACH,iBAAa,eAAe,IAAI,QAAQ,CAAC;AACzC,mBAAe,OAAO,QAAQ;AAC9B,IAAAA,OAAM,MAAM,YAAY,+BAA+B,SAAS;AAChE,IAAAA,OAAM,MAAM,YAAY,+BAA+B,WAAW;AAElE,UAAM,YAAYA,OAAM;AAExB,IAAAA,OAAM,YAAY;AAClB,IAAAA,OAAM;AACN,IAAAA,OAAM,YAAY;AAElB;AAAA,MACI,MAAM;AACF,QAAAD,iBAAgB,YAAYC,MAAK;AAAA,MACrC;AAAA,MACA,CAACA,OAAM,aAAa,8BAA8B;AAAA,IAEtD;AAAA,EACJ;AACJ;",
  "names": ["toast-container", "toast-holder", "toast-card", "toast-text-container", "toast-icon-container", "toast-icon", "toast_container", "toast_container", "toast"]
}
