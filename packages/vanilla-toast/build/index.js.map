{
  "version": 3,
  "sources": ["../src/styles/style.module.css", "../src/toast.ts", "../src/index.ts"],
  "sourcesContent": [".toast-container * {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.toast-container {\r\n    --toast-container-height: 95%;\r\n    --toast-container-width: 95%;\r\n    pointer-events: none;\r\n    position: fixed;\r\n    width: var(--toast-container-width, 99%);\r\n    height: var(--toast-container-height, 99%);\r\n    inset: 0;\r\n    margin: auto;\r\n}\r\n\r\n.toast-holder {\r\n    --toast-width: 100%;\r\n    --toast-spacing: 1rem;\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n    gap: var(--toast-spacing);\r\n\r\n    width: var(--toast-width, clamp(5rem, 100%, 20rem));\r\n    height: fit-content;\r\n}\r\n\r\n@media screen and (min-width: 480px) {\r\n    .toast-holder {\r\n        --toast-width: clamp(5rem, 90%, 18rem);\r\n    }\r\n}\r\n\r\n.toast-card {\r\n    min-height: var(--toast-height);\r\n\r\n    border: var(--toast-border-width, 2px) var(--toast-border-style, solid) var(--toast-border-color, var(--toast-text-color, inherit));\r\n\r\n    padding: var(--toast-padding, 0.75rem);\r\n    border-radius: var(--toast-radius, 0.5rem);\r\n\r\n    background: var(--toast-background-color, inherit);\r\n    color: var(--toast-text-color, inherit);\r\n\r\n    box-shadow: var(--toast-box-shadow, 0px 4px 12px hsla(0, 0%, 0%, 0.25));\r\n\r\n    display: flex;\r\n    align-items: var(--toast-align-items, center);\r\n    gap: 0.5rem;\r\n    justify-content: space-between;\r\n\r\n    transform-origin: var(--toast-transform-origin, center);\r\n\r\n    will-change: transform, opacity, height;\r\n    transition-property: transform, opacity;\r\n\r\n    pointer-events: all;\r\n    touch-action: auto;\r\n\r\n    animation-name: var(--toast-animation, popup);\r\n    animation-timing-function: var(--toast-ease, ease-in-out);\r\n    animation-duration: var(--toast-animation-duration, 0ms);\r\n    animation-direction: var(--toast-animation-direction, \"normal\");\r\n    animation-fill-mode: var(--toast-animation-fill-mode, \"forwards\");\r\n}\r\n\r\n.toast-card-close-button-hover .toast-close-button {\r\n    opacity: 0;\r\n}\r\n\r\n.toast-card-close-button-hover:hover .toast-close-button {\r\n    opacity: 1;\r\n}\r\n\r\n.toast-card[data-type=\"success\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-success, green);\r\n    --toast-text-color: var(--toast-success-foreground, white);\r\n}\r\n\r\n.toast-card[data-type=\"info\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-info, blue);\r\n    --toast-text-color: var(--toast-info-foreground, white);\r\n}\r\n\r\n.toast-card[data-type=\"error\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-error, red);\r\n    --toast-text-color: var(--toast-error-foreground, white);\r\n}\r\n\r\n.toast-card[data-type=\"warn\"][data-color-type=\"background\"] {\r\n    --toast-background-color: var(--toast-warn, yellow);\r\n    --toast-text-color: var(--toast-warn-foreground, white);\r\n}\r\n\r\n.toast-text-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.25rem;\r\n    flex: 1;\r\n}\r\n\r\n.toast-text-container>div {\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n    font-weight: var(--toast-title-font-weight, 700);\r\n}\r\n\r\n.toast-text-container>p {\r\n    font-size: 0.875rem;\r\n    line-height: 1.25;\r\n}\r\n\r\n.toast-icon-container {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 1.175rem;\r\n    height: 1.175rem;\r\n}\r\n\r\n.toast-icon {\r\n    stroke: var(--toast-icon-stroke-color, var(--toast-text-color, initial));\r\n    fill: var(--toast-icon-fill-color, transparent);\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    stroke-width: var(--toast-icon-stroke-width, 2.5px);\r\n}\r\n\r\n.toast-close-button {\r\n    cursor: pointer;\r\n\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    color: var(--toast-close-button-foreground, initial);\r\n    background-color: var(--toast-close-button-background, initial);\r\n\r\n    width: var(--toast-close-button-width, 1.25rem);\r\n    height: var(--toast-close-button-height, 1.25rem);\r\n\r\n    padding: var(--toast-close-button-vertical-padding, 0rem) var(--toast-close-button-horizontal-padding, 0rem);\r\n\r\n    box-shadow: var(--toast-close-button-box-shadow, 0px 2px 8px hsla(0, 0%, 0%, 0.25));\r\n\r\n    border-radius: var(--toast-close-button-border-radius, 0.25rem);\r\n\r\n    border: var(--toast-close-button-border, none);\r\n}\r\n\r\n.toast-close-button .toast-icon {\r\n    stroke: var(--toast-text-color, black);}\r\n\r\n.toast-close-button:hover {\r\n    opacity: 0.8;\r\n    transform: scale(1.25);\r\n}\r\n\r\n.toast-close-button-text {\r\n    --toast-close-button-width: auto;\r\n    \r\n    --toast-close-button-vertical-padding: 0.25rem;\r\n    --toast-close-button-horizontal-padding: 0.75rem;\r\n}\r\n\r\n.toast-close-button-top-right {\r\n    position: absolute;\r\n\r\n    top: -20%;\r\n    right: -0.25rem;\r\n}\r\n\r\n.toast-close-button-top-left {\r\n    position: absolute;\r\n\r\n    top: -20%;\r\n    left: -0.25rem;\r\n}\r\n\r\n.toast-close-button-inline {\r\n    position: relative;\r\n    --toast-close-button-box-shadow: none;\r\n}\r\n\r\n.toast-close-button-text:hover {\r\n    transform: scale(1);\r\n}\r\n\r\n.toast-close-button-inline-top {\r\n    position: absolute;\r\n    top: 0.1rem;\r\n    right: 0.1rem;\r\n    box-shadow: none;\r\n}\r\n", "import {\n    toast,\n    type ToastImportance,\n    type ToastOptions,\n    type ToastProps,\n    type ToastReturn,\n    type ToastTypes,\n} from \".\";\nimport {\n    close_button_aborters_hashmaps,\n    DEFAULT_ANIMATION,\n    DEFAULT_ANIMATION_DURATION,\n    DEFAULT_BOX_SHADOW_SIZE,\n    DEFAULT_CLOSE_BUTTON_POSITION,\n    DEFAULT_COLORS,\n    DEFAULT_DURATION,\n    DEFAULT_ICON_POSITION,\n    DEFAULT_MAX_TOASTS_VISIBLE,\n    DEFAULT_TOAST_POSITION,\n    timer_hashmaps,\n    TOAST_POSITIONS,\n} from \"./consts\";\nimport {\n    $,\n    $create,\n    append_custom_icon_to_element,\n    does_user_prefer_reduced_motion_query,\n    gen_random_id,\n    get_icon,\n    toast_container,\n    toast_status,\n} from \"./lib\";\n\nimport style from \"./styles/style.module.css\";\n\ntype AriaLive = \"off\" | \"polite\" | \"assertive\";\n\n/**\n * ## Toast Container Options\n * The options you want to pass to the toast container. These will be applied\n * when you load the toast container.\n */\nexport type ToastContainerOptions = {\n    /**\n     * Whether toasts should be stacked or not.\n     *\n     * If they are, then new toasts will sit on top of the previous toast. This\n     * is great to not clutter the screen.\n     *\n     * If this is enabled, then toasts can be expanded by the shortcut Alt + T,\n     * or by hovering over the toasts.\n     *\n     * @default\n     *\n     * false\n     */\n    stacked?: boolean;\n\n    /**\n     * The max amount of toasts visible. This sets the toast container to\n     * hide overflows.\n     *\n     * Note that if you pass in 0, the default amount will be applied.\n     *\n     * @default\n     *\n     * 3\n     */\n    max_toasts_visible?: number;\n\n    /**\n     * If you want to hide overflowing toasts. This can only\n     * be set on initialization.\n     */\n    hide_overflow_toast?: boolean;\n\n    /**\n     * The offset of the toast container. This determines the amount of padding or\n     * space the edges of the toasts from the edges of its parent container will have.\n     * You can also set this via the CSS properties. By default, the CSS property\n     * is == to 95% to the viewport&apos;s dimensions;\n     *\n     * - --toast-container-width\n     * - --toast-container-height\n     *\n     * @default\n     *\n     * \"95% of its container\n     */\n    container_offset?: number;\n};\n\nconst aria_live: {\n    [Properties in ToastImportance]: AriaLive;\n} = {\n    \"not important\": \"off\",\n    important: \"polite\",\n    critical: \"assertive\",\n};\n\n/**\n * ## Initialize toast\n * @param options\n */\nexport function initialize_toast(options?: ToastContainerOptions) {\n    if (document.getElementById(\"toast-holder\")) {\n        return;\n    }\n\n    let toast_main_container = toast_container;\n\n    if (!toast_container) {\n        toast_main_container = $create(\"section\");\n    }\n\n    const toast_holder = $create(\"div\");\n\n    toast_holder.classList.add(style[\"toast-holder\"]);\n    toast_holder.id = \"toast-holder\";\n    toast_holder.setAttribute(\n        \"data-max-toasts\",\n        options?.max_toasts_visible?.toString() ||\n            DEFAULT_MAX_TOASTS_VISIBLE.toString(),\n    );\n    toast_holder.setAttribute(\"data-testid\", \"toast-holder\");\n    toast_main_container.title = \"Notifications\";\n\n    if (options?.stacked) {\n        toast_main_container.setAttribute(\"aria-label\", \"Notifications\");\n        toast_holder.setAttribute(\"data-stacked\", options?.stacked + \"\");\n    }\n\n    if (options?.hide_overflow_toast) {\n        toast_holder.setAttribute(\"data-hide-overflow-toast\", \"true\");\n    }\n\n    if (options?.container_offset != undefined) {\n        toast_main_container.style.width = `calc(100% - ${options.container_offset}px)`;\n        toast_main_container.style.height = `calc(100% - ${options.container_offset}px)`;\n    }\n\n    toast_main_container.classList.add(style[\"toast-container\"]);\n    toast_main_container.append(toast_holder);\n\n    if (!toast_container) {\n        document.body.append(toast_main_container);\n    }\n}\n\n/**\n * ## Show toast\n * The main engine of this overall library. This handles toast creation.\n *\n * @param props {ToastProps} This is where you pass in the toast's message and an optional title.\n * @param options {Partial<ToastOptions>} Contains options to customize the toast.\n * @param type {ToastTypes} Specifies what kind of toast this is, and styles and/or performs methods based on the type.\n * @returns {ToastReturn} { toast_id }\n */\nexport function show_toast(\n    props: ToastProps,\n    {\n        animation = DEFAULT_ANIMATION,\n        close_button = true,\n        toast_position = DEFAULT_TOAST_POSITION,\n        toast_id = undefined,\n        custom_icon = undefined,\n        importance = \"not important\",\n        icon_position = DEFAULT_ICON_POSITION,\n        animation_duration = {\n            in: DEFAULT_ANIMATION_DURATION,\n            out: DEFAULT_ANIMATION_DURATION,\n        },\n        shadow_size = DEFAULT_BOX_SHADOW_SIZE,\n        automatically_close = true,\n        dir = \"ltr\",\n        colors = DEFAULT_COLORS,\n        duration = DEFAULT_DURATION,\n    }: Partial<ToastOptions> = {\n        animation: DEFAULT_ANIMATION,\n        close_button: true,\n        toast_position: DEFAULT_TOAST_POSITION,\n        toast_id: undefined,\n        custom_icon: undefined,\n        animation_duration: {\n            in: DEFAULT_ANIMATION_DURATION,\n            out: DEFAULT_ANIMATION_DURATION,\n        },\n        icon_position: DEFAULT_ICON_POSITION,\n        importance: \"not important\",\n        shadow_size: undefined,\n        automatically_close: true,\n        dir: \"ltr\",\n        colors: DEFAULT_COLORS,\n        duration: DEFAULT_DURATION,\n    },\n    type: ToastTypes = \"neutral\",\n): ToastReturn {\n    const toast_container = $(\"#toast-holder\")! as HTMLElement;\n\n    if (!toast_container) {\n        const error = new Error(\n            \"Toast container has not been mounted yet. Try calling initialize_toast() first.\",\n        );\n\n        alert(error);\n        console.error(error);\n        throw error;\n    }\n\n    if (type == \"loading\" && close_button == true) {\n        alert(\"A loading toast should not be manually closed.\");\n        console.error(\n            new Error(\"A loading toast should not be manually closed.\"),\n        );\n\n        throw new Error(\"A loading toast should not be manually closed.\");\n    }\n\n    if (!toast_container.classList.contains(\"toast-\" + toast_position)) {\n        for (const pos of TOAST_POSITIONS) {\n            toast_container.classList.remove(\"toast-\" + pos);\n        }\n    }\n\n    if (!toast_id) {\n        toast_id = gen_random_id();\n    }\n\n    toast_container.classList.add(\"toast-\" + toast_position);\n\n    const { title, message } = props;\n    const toast_card = $create(\"div\");\n    const toast_text_container = $create(\"div\");\n    const toast_message = $create(\"p\");\n\n    let toast_title: undefined | HTMLDivElement;\n    let toast_icon_container: undefined | HTMLDivElement;\n    let toast_close_button: undefined | HTMLButtonElement;\n\n    if (title) {\n        toast_title = $create(\"div\");\n        toast_title.setAttribute(\n            \"aria-label\",\n            \"The title of toast #\" + toast_id,\n        );\n        toast_title.id = \"toast-\" + toast_id + \"-title\";\n        toast_title.textContent = title;\n    }\n\n    if (Boolean(custom_icon) || type != \"neutral\") {\n        toast_icon_container = $create(\"div\");\n        toast_icon_container.classList.add(style[\"toast-icon-container\"]);\n\n        if (custom_icon) {\n            append_custom_icon_to_element(toast_icon_container, custom_icon);\n\n            if (typeof custom_icon != \"string\") {\n                custom_icon.classList.add(style[\"toast-icon\"]);\n            }\n        } else {\n            const svg = get_icon(type);\n\n            svg.classList.add(style[\"toast-icon\"]);\n            toast_icon_container?.append(svg);\n        }\n    }\n\n    toast_card.id = toast_id;\n    toast_card.classList.add(style[\"toast-card\"]);\n    toast_card.setAttribute(\"data-vanilla-toast\", \"true\");\n    toast_status(toast_card, type);\n    toast_card.setAttribute(\"aria-atomic\", \"true\");\n    toast_card.setAttribute(\"data-type\", type);\n    toast_card.setAttribute(\"aria-live\", aria_live[importance]);\n    toast_card.setAttribute(\"data-color-type\", colors);\n    toast_card.setAttribute(\"dir\", dir);\n\n    if (shadow_size) {\n        import(\"./consts\").then((module) => {\n            toast_card.style.setProperty(\n                \"--toast-box-shadow\",\n                module.BOX_SHADOW_SIZES[shadow_size || DEFAULT_BOX_SHADOW_SIZE],\n            );\n        });\n    }\n\n    if (!does_user_prefer_reduced_motion_query.matches) {\n        toast_card.setAttribute(\n            \"data-exit-animation-duration\",\n            animation_duration?.out?.toString(),\n        );\n        toast_card.style.setProperty(\n            \"--toast-animation-duration\",\n            animation_duration?.in + \"ms\",\n        );\n    }\n\n    toast_card.style.setProperty(\"--toast-animation\", animation);\n\n    if (colors == \"icon\" || colors == \"icon-stroke\") {\n        import(\"./styles/dynamic/icon.module.css\").then((module) => {\n            const toast_card_class_name = \"toast-card\";\n\n            toast_card.classList.add(module.default[toast_card_class_name]);\n        });\n    }\n\n    toast_text_container.classList.add(style[\"toast-text-container\"]);\n\n    toast_message.id = \"toast-\" + toast_id + \"-message\";\n    toast_message.textContent = message;\n    toast_message.setAttribute(\n        \"aria-label\",\n        \"The message of toast #\" + toast_id,\n    );\n\n    if (toast_title) {\n        toast_text_container.append(toast_title);\n    }\n\n    toast_card.setAttribute(\n        \"aria-labelledby\",\n        toast_title ? toast_title.id : toast_message.id,\n    );\n\n    toast_text_container.append(toast_message);\n\n    if (type != \"loading\" && close_button) {\n        let handle_close_button_click: undefined | ((_e: MouseEvent) => void);\n\n        toast_close_button = $create(\"button\");\n\n        if (typeof close_button != \"boolean\") {\n            if (close_button?.appearance == \"visible-on-hover\") {\n                toast_card.classList.add(\n                    style[\"toast-card-close-button-hover\"],\n                );\n            }\n\n            if (close_button.custom_button?.on_click) {\n                handle_close_button_click = function () {\n                    if (typeof close_button != \"boolean\") {\n                        if (close_button?.custom_button?.on_click) {\n                            close_button?.custom_button?.on_click(toast_id);\n                        }\n                    }\n\n                    toast.dismiss(toast_id);\n                };\n            } else {\n                handle_close_button_click = function () {\n                    toast.dismiss(toast_id);\n                };\n            }\n\n            toast_close_button.classList.add(\n                style[\n                    \"toast-close-button-\" +\n                        (close_button?.position ||\n                            DEFAULT_CLOSE_BUTTON_POSITION)\n                ],\n            );\n\n            if (close_button.type == \"text\") {\n                toast_close_button.classList.add(\n                    style[\"toast-close-button-text\"],\n                );\n                toast_close_button.style.setProperty(\n                    \"--toast-close-button-border-radius\",\n                    \"0.25rem\",\n                );\n                toast_close_button.textContent = close_button?.text || \"close\";\n            } else if (close_button?.type == \"icon\") {\n                if (close_button.custom_icon) {\n                    append_custom_icon_to_element(\n                        toast_close_button,\n                        close_button?.custom_icon,\n                    );\n                } else {\n                    const svg = get_icon(\"close\");\n\n                    svg.classList.add(style[\"toast-icon\"]);\n                    toast_close_button?.append(svg);\n                }\n            } else {\n                const svg = get_icon(\"close\");\n\n                svg.classList.add(style[\"toast-icon\"]);\n                toast_close_button?.append(svg);\n            }\n\n            if (close_button?.custom_button?.className) {\n                toast_close_button.className +=\n                    \" \" + close_button.custom_button.className;\n            }\n        } else {\n            handle_close_button_click = function () {\n                toast.dismiss(toast_id);\n            };\n            const svg = get_icon(\"close\");\n\n            svg.classList.add(style[\"toast-icon\"]);\n            toast_close_button?.append(svg);\n\n            toast_close_button.classList.add(\n                style[\"toast-close-button-\" + DEFAULT_CLOSE_BUTTON_POSITION],\n            );\n        }\n\n        if (\n            typeof close_button != \"boolean\" &&\n            close_button.position == \"inline-top\"\n        ) {\n            toast_close_button.classList.add(\"toast-close-button-inline-top\");\n        }\n\n        toast_close_button.setAttribute(\n            \"aria-label\",\n            \"Close toast #\" + toast_id,\n        );\n        toast_close_button.classList.add(style[\"toast-close-button\"]);\n        toast_close_button.setAttribute(\"type\", \"button\");\n        toast_close_button.setAttribute(\"aria-controls\", toast_id);\n        toast_close_button.tabIndex = -1;\n\n        if (handle_close_button_click) {\n            const aborter = new AbortController();\n\n            close_button_aborters_hashmaps.set(toast_id, aborter);\n            toast_close_button.addEventListener(\n                \"click\",\n                handle_close_button_click,\n                {\n                    signal: aborter.signal,\n                    once: true,\n                },\n            );\n        } else {\n            console.error(\n                \"Function to invoke for a close button does not exist!\",\n            );\n        }\n    }\n\n    if (type != \"neutral\" && icon_position == \"left\") {\n        toast_card.append(toast_icon_container as Node);\n    } else if (type != \"loading\") {\n        if (\n            (typeof close_button != \"boolean\" &&\n                (close_button?.position == \"inline\" ||\n                    close_button?.position == \"inline-top\")) ||\n            close_button\n        ) {\n            toast_card.append(toast_close_button as HTMLButtonElement);\n        }\n    }\n\n    toast_card.append(toast_text_container);\n\n    if (type != \"neutral\" && icon_position == \"right\") {\n        toast_card.append(toast_icon_container as Node);\n        toast_text_container.style.textAlign = \"right\";\n    } else if (type != \"loading\") {\n        if (\n            (typeof close_button != \"boolean\" &&\n                (close_button?.position == \"inline\" ||\n                    close_button?.position == \"inline-top\")) ||\n            close_button\n        ) {\n            toast_card.append(toast_close_button as HTMLButtonElement);\n        }\n    }\n\n    if (\n        toast_position == \"bottom-center\" ||\n        toast_position == \"bottom-left\" ||\n        toast_position == \"bottom-right\"\n    ) {\n        toast_container.style.flexDirection = \"column\";\n    }\n\n    toast_container.append(toast_card);\n\n    if (toast_container.getAttribute(\"data-hide-overflow-toasts\") == \"true\") {\n        import(\"./hide-toast\").then((module) => {\n            module.hide_old_toasts();\n        });\n    }\n\n    // if (options?.close_on_swipe) {\n    //     toast_card.addEventListener(\"pointermove\", (e) => {\n    //         if (toast_card.getAttribute(\"data-swipe\") == \"true\") {\n    //             const rect = toast_card.getBoundingClientRect();\n\n    //             console.log(rect);\n\n    //             const x = e.clientX;\n    //             const y = e.clientY;\n\n    //             console.log(e);\n    //         }\n    //     });\n\n    //     toast_card.addEventListener(\"pointerdown\", () => {\n    //         toast_card.setAttribute(\"data-swipe\", \"true\");\n    //     });\n\n    //     toast_card.addEventListener(\"pointerup\", () => {\n    //         console.log(\"released!\");\n    //         toast_card.setAttribute(\"data-swipe\", \"false\");\n    //     });\n    // }\n\n    if (type != \"loading\" && automatically_close == true) {\n        const timeout = setTimeout(\n            () => {\n                toast.dismiss(toast_id as string);\n            },\n            does_user_prefer_reduced_motion_query.matches\n                ? duration\n                : duration - animation_duration?.out,\n        );\n\n        timer_hashmaps.set(toast_id, timeout);\n    }\n\n    return { toast_id } as { toast_id: string };\n}\n\n// FOR FUTURE FEATURE, DRAGGABLE TOAST\n// function toast_draggable(toast_card: HTMLElement) {\n//     const toast_container = $(\"#toast-holder\");\n\n//     toast_card.draggable = true;\n\n//     toast_card.addEventListener(\"dragend\", (e) => {\n//         toast_card.style.zIndex = \"30\";\n//         toast_card.style.position = \"fixed\";\n\n//         const rect = toast_card.getBoundingClientRect();\n//         const container_width = toast_container.getBoundingClientRect().width;\n\n//         toast_card.style.width = container_width + \"px\";\n\n//         const x = e.pageX;\n//         const y = e.pageY;\n\n//         toast_card.style.left = `${x - rect.width / 2}px`;\n//         toast_card.style.top = `${y - rect.height / 2}px`;\n//     });\n// }\n", "/**@type {import(\"@types/index.d.ts\")} */\n\nimport { $, does_user_prefer_reduced_motion_query, dom_reflow } from \"./lib\";\nimport { show_toast } from \"./toast\";\nimport {\n    DEFAULT_ANIMATION_DURATION,\n    close_button_aborters_hashmaps,\n    timer_hashmaps,\n} from \"./consts\";\n\nexport { initialize_toast } from \"./toast\";\n\nimport \"./styles/root.css\";\nimport \"./styles/position.css\";\nimport \"./styles/animations.css\";\n\nexport type BoxShadowSizes = \"sm\" | \"md\" | \"lg\";\nexport type ToastCloseButtonPositions =\n    | \"inline\"\n    | \"inline-top\"\n    | \"top-right\"\n    | \"top-left\";\ntype IconPositions = \"left\" | \"right\";\n\n/**\n * ## Toast Positions\n * Specifies where the toast will be located\n */\nexport type ToastPositions =\n    | \"top-left\"\n    | \"top-center\"\n    | \"top-right\"\n    | \"bottom-left\"\n    | \"bottom-right\"\n    | \"bottom-center\";\n\n/**\n * ## Toast Types\n *\n * - Netural means no icon and a plain background\n * - Success means a checkmark icon and a green background\n * - Error means an x icon and a red background\n * - Warn means a warning icon and a yellow background\n * - Info means a letter i icon and a blue background\n * - Loading means a loading toast with a loading icon and a plain background\n */\nexport type ToastTypes =\n    | \"neutral\"\n    | \"success\"\n    | \"error\"\n    | \"warn\"\n    | \"info\"\n    | \"loading\"\n    | \"headless\";\n\n/**\n * Various toast animations you can apply to the toast on either enter or exit. This will be\n * applied to the CSS property of var(--animation-name), which will be used by the toast.\n */\nexport type ToastAnimations =\n    | \"popdown\"\n    | \"popup\"\n    | \"fade-in\"\n    | \"slide-up\"\n    | \"slide-down\"\n    | \"slide-left\"\n    | \"slide-right\";\n\n/**\n * ## Toast Colors\n *\n * The places which the default toast colors will apply to\n */\nexport type ToastColor = \"background\" | \"icon\" | \"icon-stroke\" | \"none\";\n\n/**\n * ## Toast Importance\n *\n * Indicates how important this toast is to aria for accessibility.\n */\nexport type ToastImportance = \"not important\" | \"important\" | \"critical\";\n\n/**\n * ## Toast Close Button Options\n * The options available for a close button.\n */\nexport type ToastCloseButtonOptions = {\n    /**\n     * The position of the close button of a toast instance.\n     * If inline, then the button's position will depend on the\n     * value of @type { IconPositions }.\n     *\n     * @default\n     *\n     * top-right\n     */\n    position?: ToastCloseButtonPositions;\n\n    /**\n     * If you'd like to pass on a custom button. For example,\n     * adding a function that is triggered when the close button is clicked,\n     * such as \"Undo\".\n     */\n    custom_button?: {\n        /**\n         * Function to trigger when this button is clicked.\n         * You don't need to add the toast.dismiss() function here\n         * as it will be called for you together with this function.\n         *\n         * @param toast_id\n         * @returns void\n         */\n        on_click?: (toast_id: string) => void;\n\n        /**\n         * Class name to provide the custom buttom.\n         * Please do refer to the CSS properties for this\n         * button first before brute-forcing your way with !important\n         * when it does not take into effect.\n         *\n         * The initial className is toast-close-button.\n         *\n         * Take note that CSS Modules is used for this so the initial class\n         * name may not be exactly the same.\n         *\n         * With this method, you can use TailwindCSS.\n         */\n        className?: string;\n    };\n\n    /**\n     * How will this button be visible?\n     *\n     * Visible means it's there right off the bat.\n     *\n     * @default\n     *\n     * visible\n     */\n    appearance?: \"visible\" | \"visible-on-hover\";\n} & (\n    | {\n          type?: \"text\";\n          /**\n           * Please do pass in the property \"type\" a value of \"text\" if you\n           * are going to pass in a text since the conditional checks for the \"type\" value,\n           * and if it does not exist, then it will default to an X icon.\n           *\n           * @default\n           * close\n           */\n          text?: string;\n      }\n    | {\n          type?: \"icon\";\n          /** If this custom icon is a string,\n           *  then we append it using innerHTML.\n           *\n           * Please do pass in the property \"type\" a value of \"icon\" if you\n           * are going to pass in an icon since the conditional checks for the \"type\" value,\n           * and if it does not exist, then it will default to an X icon.\n           *\n           * @default\n           *\n           * an X icon\n           */\n          custom_icon?: string | HTMLElement | SVGElement;\n      }\n);\n\n/**\n * ## Toast Options\n *\n * The options available to a toast instance or element for\n * customization on toast creation.\n *\n */\nexport type ToastOptions = {\n    /**\n     * The duration in milliseconds you'd like to give this toast instance before it gets removed\n     * from the DOM or the webpage.\n     *\n     * @default \"Toast container attribute [data-duration] value or 3000\"\n     */\n    duration?: number;\n\n    /**\n     * The id you'd like to give this toast instance. This is not required as\n     * the random id will be pseudo-randomly generated for you already.\n     *\n     */\n    toast_id?: string;\n\n    /**\n     * Whether to add a close button or not. Alternatively,\n     * you can add options for this close button, or even\n     * attach you custom close button.\n     *\n     *  @default true\n     */\n    close_button?: boolean | ToastCloseButtonOptions;\n\n    /**\n     *  Indicates how long the toast will animate in and out in milliseconds.\n     *\n     * @default\n     *\n     * in: 400\n     * out: 400\n     */\n    animation_duration?: {\n        in?: number;\n        out?: number;\n    };\n\n    /**\n     *  A custom icon to pass to the toast. This can be a string or an element that will be appended.\n     *  The toast maker automatically adds the toast icon class to the element you pass through if it is an element.\n     *  If it's a string, then it will not have the toast icon class.\n     *\n     *\n     *  **WARNING**\n     *  This method uses innerHTML for strings\n     */\n    custom_icon?: string | HTMLElement | SVGElement;\n\n    /**\n     * The position a specific toast's icon.\n     * @type { IconPositions }\n     *\n     * @default\n     *\n     * \"left\"\n     */\n    icon_position?: IconPositions;\n\n    /**\n     * The position where the toast is rendered.\n     *\n     *  @default\n     *\n     *  top-right\n     */\n    toast_position?: ToastPositions;\n\n    /**\n     *  Sets the importance of this toast. This translates to\n     *  the [aria-live] attribute for accessibility.\n     *\n     *  This is not required as it will be inferred for you already. Namely:\n     *\n     *  - Success, Warn, and Error is critical, which means [aria-live] is assertive\n     *  - Loading and Neutral states are not important, which means [aria-live] is off\n     *  - Info is important, which means [aria-live] is polite\n     */\n    importance?: ToastImportance;\n\n    /**\n     * Sets what the toast color will target.\n     *\n     * @default\n     *\n     * background\n     */\n    colors?: ToastColor;\n\n    /**\n     * Enter animation for the toast\n     *\n     * @default\n     * \"popdown\"\n     */\n    animation?: ToastAnimations;\n\n    /**\n     * Even though loading toasts must be closed programatically (by you),\n     * you can still choose to not automatically close other toasts.\n     *\n     * **WARNING**\n     * If you disable this, then you must be the one to close the toast like a loading toast.\n     *\n     * @default\n     * true\n     */\n    automatically_close?: boolean;\n\n    /**\n     * The size of the toast's box shadow. The default is already in the CSS Property var(--toast-box-shadow).\n     * This will lazily import the constant that maps the specific CSS value for the box shadow, so take note of that\n     * if you're an optimization enthusiast.\n     *\n     *  @default\n     * sm\n     */\n    shadow_size?: BoxShadowSizes;\n\n    /** Direction of text */\n    dir?: \"ltr\" | \"rtl\";\n\n    /**\n     * Whether to close a toast when it's swiped based on the value of the property swipe_direction.\n     *\n     * @default\n     *\n     * false\n     */\n    close_on_swipe?:\n        | boolean\n        | {\n              /**\n               * The amount of pixels a toast should be dragged away from\n               * its original position based on the desired location\n               * &#40;i.e. horizontal&#41; before it's closed.\n               *\n               * This is only available if you enable the option: close_on_swipe\n               *\n               * @default\n               *\n               * 30\n               */\n              swipe_threshold_before_closure?: number;\n          };\n};\n\n/**\n * ## ToastProps\n * The main characteristics the toast will have.\n * An optional title and a required message.\n */\nexport type ToastProps = {\n    /**\n     * An optional title to give the toast. This will appear in bold by default.\n     */\n    title?: string;\n\n    /**\n     * The main message of the toast.\n     */\n    message: string;\n};\n\n/**\n * ## Toast Return\n *\n * The return value of a toast instance.\n *\n * ### toast_id\n * The id of the toast element that was pseudo-randomly generated, or this can also be\n * the toast id that you provide in the toast function arguments.\n *\n */\nexport type ToastReturn = {\n    toast_id: string;\n};\n\ninterface Toast {\n    (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n        type?: ToastTypes,\n    ): ToastReturn;\n\n    /**\n     * ## Success Toast\n     *\n     * A toast that signals success. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"success\"\n     */\n    success: (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n    ) => ToastReturn;\n\n    /**\n     * ## Error Toast\n     *\n     * A toast that signals error. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"error\"\n     */\n    error: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Warn Toast\n     *\n     * A toast that signals a warning. Has a default configuration of:\n     *\n     * - importance = \"critical\"\n     * - type = \"warn\"\n     */\n    warn: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Info Toast\n     *\n     * A toast to share fun facts or information. Has a default configuration of:\n     *\n     * - importance = \"important\"\n     * - type = \"info\"\n     */\n    info: (props: ToastProps, options?: Partial<ToastOptions>) => ToastReturn;\n\n    /**\n     * ## Loading Toast\n     *\n     * A toast to indicate a loading state of something. Cannot be manually closed with a button, and\n     * must be closed by you, the developer, programatically as this will not have a setTimeout. Has a default\n     * configuration of:\n     *\n     * - importance = \"not important\"\n     * - type = \"loading\"\n     */\n    loading: (\n        props: ToastProps,\n        options?: Partial<ToastOptions>,\n    ) => ToastReturn;\n\n    /**\n     * ## Toast Dismiss\n     *\n     * Removes a toast based upon its id.\n     *\n     * You can prematurely remove a toast if you'd like using this function. This is the function used\n     * for toast removal.\n     *\n     * Responsibilities:\n     * - Removes event listeners attached to all elements of a toast instance.\n     * - Animates a toast instance out.\n     * - Removes a toast from the DOM.\n     */\n    dismiss: (toast_id: string) => void;\n\n    /**\n     * ## Toast Promise\n     * Runs a function for you and shows a toast depending whether an error was thrown or not.\n     */\n    promise: <T>(\n        callback: (...args: T[]) => Promise<unknown>,\n        args: T[],\n    ) => Promise<unknown>;\n}\n\n/**\n * ## Toast\n * The main guy.\n *\n * This calls the main engine (or function) of this library, and has various properties\n * that automatically gives you the type argument for the show_toast() function.\n *\n * There are special functions too, like:\n *\n * - dismiss() or toast.dismiss()\n *\n * ### Accessibility\n * This automatically infers aria-live values for you.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live\n *\n * Additionally, this code automatically detects if a user prefers instant animations (prefers-reduced-motion). If so,\n * your configuration for animation_duration will be disregarded.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\n */\nexport const toast: Toast = function (props, options, type) {\n    return show_toast(props, options, type);\n};\n\ntoast.success = function (props, options) {\n    return show_toast(props, options, \"success\");\n};\n\ntoast.error = function (props, options) {\n    return show_toast(props, options, \"error\");\n};\n\ntoast.warn = function (props, options) {\n    return show_toast(props, options, \"warn\");\n};\n\ntoast.info = function (props, options) {\n    return show_toast(props, options, \"info\");\n};\n\ntoast.loading = function (props, options) {\n    return show_toast(props, options, \"loading\");\n};\n\ntoast.promise = async function (callback, args) {\n    const { toast_id } = show_toast(\n        { message: \"loading...\" },\n        { automatically_close: false, close_button: false },\n    );\n\n    const toast = $(\"#\" + CSS.escape(toast_id));\n    const toast_message = $(\"#\" + `toast-${CSS.escape(toast_id)}-message`);\n\n    try {\n        const results = await callback(...args);\n\n        toast_message.textContent = \"Success!\";\n        toast.setAttribute(\"data-type\", \"success\");\n\n        return results;\n    } catch (error) {\n        toast_message.textContent = \"Error\";\n        toast.setAttribute(\"data-type\", \"error\");\n        console.log(error?.message || error);\n\n        return error;\n    }\n};\n\ntoast.dismiss = function (toast_id) {\n    const does_user_prefer_reduced_motion =\n        does_user_prefer_reduced_motion_query.matches;\n    const toast_container = $(\"#toast-holder\") as HTMLElement;\n    const toast = $(`#${CSS.escape(toast_id)}`) as HTMLElement;\n\n    if (!toast_container) {\n        console.error(\"Toast container does not exist!\");\n    }\n\n    if (!toast) {\n        console.error(\"Toast does not exist!\");\n    }\n\n    /**\n     *  Remove all event listeners of\n     *  this specific toast instance and its relative aborters.\n     */\n    close_button_aborters_hashmaps.get(toast_id)?.abort();\n    close_button_aborters_hashmaps.delete(toast_id);\n    clearTimeout(timer_hashmaps.get(toast_id));\n    timer_hashmaps.delete(toast_id);\n\n    const is_hidden = toast.getAttribute(\"aria-hidden\");\n\n    if (is_hidden == \"true\" || does_user_prefer_reduced_motion) {\n        toast_container.removeChild(toast);\n    } else {\n        toast.style.setProperty(\"--toast-animation-direction\", \"reverse\");\n        toast.style.setProperty(\"--toast-animation-fill-mode\", \"forwards\");\n\n        dom_reflow(toast);\n\n        setTimeout(\n            () => {\n                toast_container.removeChild(toast);\n            },\n            +toast.getAttribute(\"data-exit-animation-duration\") ??\n                DEFAULT_ANIMATION_DURATION,\n        );\n    }\n};\n"],
  "mappings": "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",
  "names": ["style_default", "toast-container", "toast-holder", "toast-card", "toast-card-close-button-hover", "toast-close-button", "toast-text-container", "toast-icon-container", "toast-icon", "toast-close-button-text", "toast-close-button-top-right", "toast-close-button-top-left", "toast-close-button-inline", "toast-close-button-inline-top", "aria_live", "initialize_toast", "options", "toast_main_container", "toast_container", "$create", "toast_holder", "style_default", "__name", "show_toast", "props", "animation", "DEFAULT_ANIMATION", "close_button", "toast_position", "DEFAULT_TOAST_POSITION", "toast_id", "custom_icon", "importance", "icon_position", "DEFAULT_ICON_POSITION", "animation_duration", "shadow_size", "DEFAULT_BOX_SHADOW_SIZE", "automatically_close", "dir", "colors", "DEFAULT_COLORS", "duration", "type", "$", "error", "pos", "TOAST_POSITIONS", "gen_random_id", "title", "message", "toast_card", "toast_text_container", "toast_message", "toast_title", "toast_icon_container", "toast_close_button", "append_custom_icon_to_element", "svg", "get_icon", "toast_status", "module", "does_user_prefer_reduced_motion_query", "toast_card_class_name", "handle_close_button_click", "toast", "DEFAULT_CLOSE_BUTTON_POSITION", "aborter", "close_button_aborters_hashmaps", "timeout", "timer_hashmaps", "toast", "__name", "props", "options", "type", "show_toast", "callback", "args", "toast_id", "$", "toast_message", "results", "error", "does_user_prefer_reduced_motion", "does_user_prefer_reduced_motion_query", "toast_container", "close_button_aborters_hashmaps", "timer_hashmaps", "dom_reflow"]
}
